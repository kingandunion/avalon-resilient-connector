# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for avalon"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the avalon package"""
    reload_params = {"package": u"avalon",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "functions_params": [], 
                    "datatables": [], 
                    "message_destinations": [u"avalon_actions"], 
                    "functions": [u"avalon_refresh"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"avalon_refresh"], 
                    "actions": [u"Avalon: Add Node", u"Avalon: Create Workspace", u"Avalon: Pull Workspace Nodes"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Message Destinations:
    #     avalon_actions
    #   Functions:
    #     avalon_refresh
    #   Workflows:
    #     avalon_refresh
    #   Rules:
    #     Avalon: Add Node
    #     Avalon: Create Workspace
    #     Avalon: Pull Workspace Nodes


    yield ImportDefinition(u"""
eyJpZCI6IDE1LCAiZmllbGRzIjogW3siY2hvc2VuIjogZmFsc2UsICJpbnRlcm5hbCI6IGZhbHNl
LCAidXVpZCI6ICJjM2YwZTNlZC0yMWUxLTRkNTMtYWZmYi1mZTVjYTMzMDhjY2EiLCAib3BlcmF0
aW9ucyI6IFtdLCAidmFsdWVzIjogW10sICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMzgsICJu
YW1lIjogImluY190cmFpbmluZyIsICJ0ZXh0IjogIlNpbXVsYXRpb24iLCAicHJlZml4IjogbnVs
bCwgInR5cGVfaWQiOiAwLCAidG9vbHRpcCI6ICJXaGV0aGVyIHRoZSBpbmNpZGVudCBpcyBhIHNp
bXVsYXRpb24gb3IgYSByZWd1bGFyIGluY2lkZW50LiAgVGhpcyBmaWVsZCBpcyByZWFkLW9ubHku
IiwgImlucHV0X3R5cGUiOiAiYm9vbGVhbiIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAi
ZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwg
Im9wZXJhdGlvbl9wZXJtcyI6IHt9LCAicmVhZF9vbmx5IjogdHJ1ZSwgInJpY2hfdGV4dCI6IGZh
bHNlLCAiZXhwb3J0X2tleSI6ICJpbmNpZGVudC9pbmNfdHJhaW5pbmciLCAidGVtcGxhdGVzIjog
W119XSwgInBoYXNlcyI6IFtdLCAib3ZlcnJpZGVzIjogW10sICJhY3Rpb25zIjogW3siaWQiOiAx
NywgIm5hbWUiOiAiQXZhbG9uOiBBZGQgTm9kZSIsICJ0eXBlIjogMSwgIm9iamVjdF90eXBlIjog
ImFydGlmYWN0IiwgImNvbmRpdGlvbnMiOiBbeyJtZXRob2QiOiAiZXF1YWxzIiwgImZpZWxkX25h
bWUiOiAiYXJ0aWZhY3QudHlwZSIsICJ2YWx1ZSI6ICJJUCBBZGRyZXNzIiwgInR5cGUiOiBudWxs
LCAiZXZhbHVhdGlvbl9pZCI6IDJ9LCB7Im1ldGhvZCI6ICJlcXVhbHMiLCAiZmllbGRfbmFtZSI6
ICJhcnRpZmFjdC50eXBlIiwgInZhbHVlIjogIkROUyBOYW1lIiwgInR5cGUiOiBudWxsLCAiZXZh
bHVhdGlvbl9pZCI6IDF9LCB7Im1ldGhvZCI6ICJub3RfY29udGFpbnMiLCAiZmllbGRfbmFtZSI6
ICJhcnRpZmFjdC5kZXNjcmlwdGlvbiIsICJ2YWx1ZSI6ICJBdmFsb24iLCAidHlwZSI6IG51bGws
ICJldmFsdWF0aW9uX2lkIjogM31dLCAiYXV0b21hdGlvbnMiOiBbXSwgIm1lc3NhZ2VfZGVzdGlu
YXRpb25zIjogWyJBdmFsb24gQWN0aW9ucyJdLCAid29ya2Zsb3dzIjogW10sICJ2aWV3X2l0ZW1z
IjogW10sICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiZTkwODc4ZDgtYmM1ZC00
OGI2LTgxY2QtNDE0ODQxNWU4YjUzIiwgImV4cG9ydF9rZXkiOiAiQXZhbG9uOiBBZGQgTm9kZSIs
ICJsb2dpY190eXBlIjogImFkdmFuY2VkIiwgImN1c3RvbV9jb25kaXRpb24iOiAiKDEgT1IgMikg
QU5EIDMifSwgeyJpZCI6IDE1LCAibmFtZSI6ICJBdmFsb246IENyZWF0ZSBXb3Jrc3BhY2UiLCAi
dHlwZSI6IDEsICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJjb25kaXRpb25zIjogW10sICJh
dXRvbWF0aW9ucyI6IFtdLCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbIkF2YWxvbiBBY3Rpb25z
Il0sICJ3b3JrZmxvd3MiOiBbXSwgInZpZXdfaXRlbXMiOiBbXSwgInRpbWVvdXRfc2Vjb25kcyI6
IDg2NDAwLCAidXVpZCI6ICIyNjFmNmFkMi1iYTY4LTRjZDEtYWQyMy02YjVmYjljY2M2OWIiLCAi
ZXhwb3J0X2tleSI6ICJBdmFsb246IENyZWF0ZSBXb3Jrc3BhY2UiLCAibG9naWNfdHlwZSI6ICJh
bGwifSwgeyJpZCI6IDE2LCAibmFtZSI6ICJBdmFsb246IFB1bGwgV29ya3NwYWNlIE5vZGVzIiwg
InR5cGUiOiAxLCAib2JqZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAiY29uZGl0aW9ucyI6IFtdLCAi
YXV0b21hdGlvbnMiOiBbXSwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogWyJBdmFsb24gQWN0aW9u
cyJdLCAid29ya2Zsb3dzIjogW10sICJ2aWV3X2l0ZW1zIjogW10sICJ0aW1lb3V0X3NlY29uZHMi
OiA4NjQwMCwgInV1aWQiOiAiYWZjZjkxODMtODRhOS00YzhhLThhYWMtODUxMGFkMDI5NzAwIiwg
ImV4cG9ydF9rZXkiOiAiQXZhbG9uOiBQdWxsIFdvcmtzcGFjZSBOb2RlcyIsICJsb2dpY190eXBl
IjogImFsbCJ9XSwgImxheW91dHMiOiBbXSwgIm5vdGlmaWNhdGlvbnMiOiBudWxsLCAidGltZWZy
YW1lcyI6IG51bGwsICJpbmR1c3RyaWVzIjogbnVsbCwgInJlZ3VsYXRvcnMiOiBudWxsLCAiZ2Vv
cyI6IG51bGwsICJmdW5jdGlvbnMiOiBbeyJpZCI6IDIsICJuYW1lIjogImF2YWxvbl9yZWZyZXNo
IiwgImRlc2NyaXB0aW9uIjogeyJmb3JtYXQiOiAidGV4dCIsICJjb250ZW50IjogIlB1bGxzIGRh
dGEgZnJvbSBhIGxpbmtlZCBBdmFsb24gd29ya3NwYWNlLiBSZXF1aXJlcyBhbiBBdmFsb24gV29y
a3NwYWNlIGFydGlmYWN0IHRvIGJlIHByZXNlbnQgaW4gdGhlIGluY2lkZW50LiBBdmFsb24gV29y
a3NwYWNlIGFydGlmYWN0IGNhbiBiZSBjcmVhdGVkIHdpdGggdGhlIFwiQXZhbG9uOiBDcmVhdGUg
V29ya3NwYWNlXCIgY3VzdG9tIG1lbnUgY29tbWFuZC4ifSwgInV1aWQiOiAiNGJjYzJkZjEtYzYw
Yy00ZjYyLTg3OWEtMDI0Y2IxNTBhMTllIiwgInZlcnNpb24iOiAxLCAiY3JlYXRvciI6IHsiaWQi
OiAxLCAidHlwZSI6ICJ1c2VyIiwgIm5hbWUiOiAidmFsQGtpbmdhbmR1bmlvbi5jb20iLCAiZGlz
cGxheV9uYW1lIjogIlZhbCBLYW50Y2hldiJ9LCAid29ya2Zsb3dzIjogW3siZGVzY3JpcHRpb24i
OiBudWxsLCAidXVpZCI6IG51bGwsICJ3b3JrZmxvd19pZCI6IDMsICJuYW1lIjogIkF2YWxvbjog
UmVmcmVzaCIsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJhdmFsb25fcmVmcmVzaCIsICJvYmplY3Rf
dHlwZSI6ICJpbmNpZGVudCIsICJhY3Rpb25zIjogW119XSwgImRpc3BsYXlfbmFtZSI6ICJBdmFs
b246IFJlZnJlc2giLCAiZGVzdGluYXRpb25faGFuZGxlIjogImF2YWxvbl9hY3Rpb25zIiwgImV4
cG9ydF9rZXkiOiAiYXZhbG9uX3JlZnJlc2giLCAibGFzdF9tb2RpZmllZF9ieSI6IHsiaWQiOiAx
LCAidHlwZSI6ICJ1c2VyIiwgIm5hbWUiOiAidmFsQGtpbmdhbmR1bmlvbi5jb20iLCAiZGlzcGxh
eV9uYW1lIjogIlZhbCBLYW50Y2hldiJ9LCAibGFzdF9tb2RpZmllZF90aW1lIjogMTU0NTg0MzEz
Mzc2NiwgInZpZXdfaXRlbXMiOiBbXX1dLCAic2VydmVyX3ZlcnNpb24iOiB7Im1ham9yIjogMzAs
ICJtaW5vciI6IDAsICJidWlsZF9udW1iZXIiOiAzNDc2LCAidmVyc2lvbiI6ICIzMC4wLjM0NzYi
fSwgImV4cG9ydF9mb3JtYXRfdmVyc2lvbiI6IDIsICJleHBvcnRfZGF0ZSI6IDE1NDY0NTU5OTc5
MTgsICJpbmNpZGVudF90eXBlcyI6IFt7InVwZGF0ZV9kYXRlIjogMTU0NjQ1NjEyOTU1MSwgImNy
ZWF0ZV9kYXRlIjogMTU0NjQ1NjEyOTU1MSwgInV1aWQiOiAiYmZlZWMyZDQtMzc3MC0xMWU4LWFk
MzktNGEwMDA0MDQ0YWEwIiwgImRlc2NyaXB0aW9uIjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMg
KGludGVybmFsKSIsICJleHBvcnRfa2V5IjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVy
bmFsKSIsICJuYW1lIjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIsICJlbmFi
bGVkIjogZmFsc2UsICJzeXN0ZW0iOiBmYWxzZSwgInBhcmVudF9pZCI6IG51bGwsICJoaWRkZW4i
OiBmYWxzZSwgImlkIjogMH1dLCAiYXV0b21hdGljX3Rhc2tzIjogW10sICJtZXNzYWdlX2Rlc3Rp
bmF0aW9ucyI6IFt7Im5hbWUiOiAiQXZhbG9uIEFjdGlvbnMiLCAicHJvZ3JhbW1hdGljX25hbWUi
OiAiYXZhbG9uX2FjdGlvbnMiLCAiZGVzdGluYXRpb25fdHlwZSI6IDAsICJleHBlY3RfYWNrIjog
dHJ1ZSwgInVzZXJzIjogWyJ2YWxAa2luZ2FuZHVuaW9uLmNvbSJdLCAidXVpZCI6ICJjMzMyNTBm
NC03ODExLTQ1YjUtODU4Yi1kNTk3ZDIyNjljODEiLCAiZXhwb3J0X2tleSI6ICJhdmFsb25fYWN0
aW9ucyJ9XSwgInRhc2tfb3JkZXIiOiBbXSwgImFjdGlvbl9vcmRlciI6IFtdLCAidHlwZXMiOiBb
XSwgInNjcmlwdHMiOiBbXSwgImluY2lkZW50X2FydGlmYWN0X3R5cGVzIjogW10sICJ3b3JrZmxv
d3MiOiBbeyJkZXNjcmlwdGlvbiI6ICJQdWxscyBkYXRhIGZyb20gbGlua2VkIEF2YWxvbiB3b3Jr
c3BhY2UuIFJlcXVpcmVzIGFuIEF2YWxvbiBXb3Jrc3BhY2UgdG8gYmUgbGlua2VkIHRvIGFuIGlu
Y2lkZW50LiBZb3UgY2FuIGNyZWF0ZSBhbmQgbGluayBhbiBBdmFsb24gd29ya3NwYWNlIGFydGlm
YWN0IGJ5IGV4ZWN1dGluZyB0aGUgXCJBdmFsb246IENyZWF0ZSBXb3Jrc3BhY2VcIiBjdXN0b20g
bWVudSBjb21tYW5kLiIsICJ1dWlkIjogImQzOGM2NzFmLWZjMzktNDc0MS1iMDE3LTczNGYwMWJl
MTY3YyIsICJ3b3JrZmxvd19pZCI6IDMsICJuYW1lIjogIkF2YWxvbjogUmVmcmVzaCIsICJwcm9n
cmFtbWF0aWNfbmFtZSI6ICJhdmFsb25fcmVmcmVzaCIsICJvYmplY3RfdHlwZSI6ICJpbmNpZGVu
dCIsICJjcmVhdG9yX2lkIjogInZhbEBraW5nYW5kdW5pb24uY29tIiwgImxhc3RfbW9kaWZpZWRf
YnkiOiAidmFsQGtpbmdhbmR1bmlvbi5jb20iLCAibGFzdF9tb2RpZmllZF90aW1lIjogMTU0NTg0
NDYyMjE2NCwgImV4cG9ydF9rZXkiOiAiYXZhbG9uX3JlZnJlc2giLCAiY29udGVudCI6IHsieG1s
IjogIjw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9u
cyB4bWxucz1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4
bWxuczpicG1uZGk9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIg
eG1sbnM6b21nZGM9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHht
bG5zOm9tZ2RpPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxu
czpyZXNpbGllbnQ9XCJodHRwOi8vcmVzaWxpZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1c
Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3
dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRw
Oi8vd3d3LmNhbXVuZGEub3JnL3Rlc3RcIj48cHJvY2VzcyBpZD1cImF2YWxvbl9yZWZyZXNoXCIg
aXNFeGVjdXRhYmxlPVwidHJ1ZVwiIG5hbWU9XCJBdmFsb246IFJlZnJlc2hcIj48ZG9jdW1lbnRh
dGlvbj48IVtDREFUQVtQdWxscyBkYXRhIGZyb20gbGlua2VkIEF2YWxvbiB3b3Jrc3BhY2UuIFJl
cXVpcmVzIGFuIEF2YWxvbiBXb3Jrc3BhY2UgdG8gYmUgbGlua2VkIHRvIGFuIGluY2lkZW50LiBZ
b3UgY2FuIGNyZWF0ZSBhbmQgbGluayBhbiBBdmFsb24gd29ya3NwYWNlIGFydGlmYWN0IGJ5IGV4
ZWN1dGluZyB0aGUgXCJBdmFsb246IENyZWF0ZSBXb3Jrc3BhY2VcIiBjdXN0b20gbWVudSBjb21t
YW5kLl1dPjwvZG9jdW1lbnRhdGlvbj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4
bVwiPjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMHlyZTI0ZTwvb3V0Z29pbmc+PC9zdGFydEV2ZW50
PjxzZXJ2aWNlVGFzayBpZD1cIlNlcnZpY2VUYXNrXzB1YnoyZ2pcIiBuYW1lPVwiQXZhbG9uOiBS
ZWZyZXNoXCIgcmVzaWxpZW50OnR5cGU9XCJmdW5jdGlvblwiPjxleHRlbnNpb25FbGVtZW50cz48
cmVzaWxpZW50OmZ1bmN0aW9uIHV1aWQ9XCI0YmNjMmRmMS1jNjBjLTRmNjItODc5YS0wMjRjYjE1
MGExOWVcIj57XCJpbnB1dHNcIjp7fX08L3Jlc2lsaWVudDpmdW5jdGlvbj48L2V4dGVuc2lvbkVs
ZW1lbnRzPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMHlyZTI0ZTwvaW5jb21pbmc+PC9zZXJ2aWNl
VGFzaz48c2VxdWVuY2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzB5cmUyNGVcIiBzb3VyY2VSZWY9
XCJTdGFydEV2ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJTZXJ2aWNlVGFza18wdWJ6MmdqXCIv
Pjx0ZXh0QW5ub3RhdGlvbiBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIj48dGV4dD5TdGFy
dCB5b3VyIHdvcmtmbG93IGhlcmU8L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48YXNzb2NpYXRpb24g
aWQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4XCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3ht
XCIgdGFyZ2V0UmVmPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiLz48L3Byb2Nlc3M+PGJwbW5k
aTpCUE1ORGlhZ3JhbSBpZD1cIkJQTU5EaWFncmFtXzFcIj48YnBtbmRpOkJQTU5QbGFuZSBicG1u
RWxlbWVudD1cInVuZGVmaW5lZFwiIGlkPVwiQlBNTlBsYW5lXzFcIj48YnBtbmRpOkJQTU5TaGFw
ZSBicG1uRWxlbWVudD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIGlkPVwiU3RhcnRFdmVudF8xNTVh
c3htX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4PVwiMTYy
XCIgeT1cIjE4OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjBc
IiB3aWR0aD1cIjkwXCIgeD1cIjE1N1wiIHk9XCIyMjNcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwv
YnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlRleHRBbm5v
dGF0aW9uXzFreHhpeXRcIiBpZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRfZGlcIj48b21nZGM6
Qm91bmRzIGhlaWdodD1cIjMwXCIgd2lkdGg9XCIxMDBcIiB4PVwiOTlcIiB5PVwiMjU0XCIvPjwv
YnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiQXNzb2NpYXRp
b25fMXNldWo0OFwiIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OF9kaVwiPjxvbWdkaTp3YXlwb2lu
dCB4PVwiMTY5XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMjBcIi8+PG9tZ2RpOndh
eXBvaW50IHg9XCIxNTNcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjI1NFwiLz48L2Jw
bW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlNlcnZpY2VUYXNr
XzB1YnoyZ2pcIiBpZD1cIlNlcnZpY2VUYXNrXzB1YnoyZ2pfZGlcIj48b21nZGM6Qm91bmRzIGhl
aWdodD1cIjgwXCIgd2lkdGg9XCIxMDBcIiB4PVwiMjI1XCIgeT1cIjE2NlwiLz48L2JwbW5kaTpC
UE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18weXJl
MjRlXCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMHlyZTI0ZV9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwi
MTk4XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50
IHg9XCIyMjVcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQ
TU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjIxMS41
XCIgeT1cIjE4NFwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PC9icG1u
ZGk6QlBNTlBsYW5lPjwvYnBtbmRpOkJQTU5EaWFncmFtPjwvZGVmaW5pdGlvbnM+IiwgInZlcnNp
b24iOiAyLCAid29ya2Zsb3dfaWQiOiAiYXZhbG9uX3JlZnJlc2gifSwgImFjdGlvbnMiOiBbXX1d
LCAicm9sZXMiOiBbXSwgIndvcmtzcGFjZXMiOiBbXX0=
"""
    )