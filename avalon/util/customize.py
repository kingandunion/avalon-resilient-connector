# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for avalon"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the avalon package"""
    reload_params = {"package": u"avalon",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "functions_params": [], 
                    "datatables": [], 
                    "message_destinations": [u"avalon_actions"], 
                    "functions": [u"avalon_refresh"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"avalon_refresh"], 
                    "actions": [u"Avalon: Add Node", u"Avalon: Create Workspace", u"Avalon: Import Nodes"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Message Destinations:
    #     avalon_actions
    #   Functions:
    #     avalon_refresh
    #   Workflows:
    #     avalon_refresh
    #   Rules:
    #     Avalon: Add Node
    #     Avalon: Create Workspace
    #     Avalon: Import Nodes


    yield ImportDefinition(u"""
eyJpZCI6IDE0LCAiZmllbGRzIjogW3siY2hvc2VuIjogZmFsc2UsICJpbnRlcm5hbCI6IGZhbHNl
LCAidXVpZCI6ICJjM2YwZTNlZC0yMWUxLTRkNTMtYWZmYi1mZTVjYTMzMDhjY2EiLCAib3BlcmF0
aW9ucyI6IFtdLCAidmFsdWVzIjogW10sICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMzgsICJu
YW1lIjogImluY190cmFpbmluZyIsICJ0ZXh0IjogIlNpbXVsYXRpb24iLCAicHJlZml4IjogbnVs
bCwgInR5cGVfaWQiOiAwLCAidG9vbHRpcCI6ICJXaGV0aGVyIHRoZSBpbmNpZGVudCBpcyBhIHNp
bXVsYXRpb24gb3IgYSByZWd1bGFyIGluY2lkZW50LiAgVGhpcyBmaWVsZCBpcyByZWFkLW9ubHku
IiwgImlucHV0X3R5cGUiOiAiYm9vbGVhbiIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAi
ZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwg
Im9wZXJhdGlvbl9wZXJtcyI6IHt9LCAicmVhZF9vbmx5IjogdHJ1ZSwgInJpY2hfdGV4dCI6IGZh
bHNlLCAiZXhwb3J0X2tleSI6ICJpbmNpZGVudC9pbmNfdHJhaW5pbmciLCAidGVtcGxhdGVzIjog
W119XSwgInBoYXNlcyI6IFtdLCAib3ZlcnJpZGVzIjogW10sICJhY3Rpb25zIjogW3siaWQiOiAx
NywgIm5hbWUiOiAiQXZhbG9uOiBBZGQgTm9kZSIsICJ0eXBlIjogMSwgIm9iamVjdF90eXBlIjog
ImFydGlmYWN0IiwgImNvbmRpdGlvbnMiOiBbeyJtZXRob2QiOiAiZXF1YWxzIiwgImZpZWxkX25h
bWUiOiAiYXJ0aWZhY3QudHlwZSIsICJ2YWx1ZSI6ICJETlMgTmFtZSIsICJ0eXBlIjogbnVsbCwg
ImV2YWx1YXRpb25faWQiOiAxfSwgeyJtZXRob2QiOiAibm90X2NvbnRhaW5zIiwgImZpZWxkX25h
bWUiOiAiYXJ0aWZhY3QuZGVzY3JpcHRpb24iLCAidmFsdWUiOiAiQXZhbG9uIiwgInR5cGUiOiBu
dWxsLCAiZXZhbHVhdGlvbl9pZCI6IDN9LCB7Im1ldGhvZCI6ICJlcXVhbHMiLCAiZmllbGRfbmFt
ZSI6ICJhcnRpZmFjdC50eXBlIiwgInZhbHVlIjogIklQIEFkZHJlc3MiLCAidHlwZSI6IG51bGws
ICJldmFsdWF0aW9uX2lkIjogMn1dLCAiYXV0b21hdGlvbnMiOiBbXSwgIm1lc3NhZ2VfZGVzdGlu
YXRpb25zIjogWyJBdmFsb24gQWN0aW9ucyJdLCAid29ya2Zsb3dzIjogW10sICJ2aWV3X2l0ZW1z
IjogW10sICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiZTkwODc4ZDgtYmM1ZC00
OGI2LTgxY2QtNDE0ODQxNWU4YjUzIiwgImV4cG9ydF9rZXkiOiAiQXZhbG9uOiBBZGQgTm9kZSIs
ICJsb2dpY190eXBlIjogImFkdmFuY2VkIiwgImN1c3RvbV9jb25kaXRpb24iOiAiKDEgT1IgMikg
QU5EIDMifSwgeyJpZCI6IDE1LCAibmFtZSI6ICJBdmFsb246IENyZWF0ZSBXb3Jrc3BhY2UiLCAi
dHlwZSI6IDEsICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJjb25kaXRpb25zIjogW10sICJh
dXRvbWF0aW9ucyI6IFtdLCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbIkF2YWxvbiBBY3Rpb25z
Il0sICJ3b3JrZmxvd3MiOiBbXSwgInZpZXdfaXRlbXMiOiBbXSwgInRpbWVvdXRfc2Vjb25kcyI6
IDg2NDAwLCAidXVpZCI6ICIyNjFmNmFkMi1iYTY4LTRjZDEtYWQyMy02YjVmYjljY2M2OWIiLCAi
ZXhwb3J0X2tleSI6ICJBdmFsb246IENyZWF0ZSBXb3Jrc3BhY2UiLCAibG9naWNfdHlwZSI6ICJh
bGwifSwgeyJpZCI6IDE2LCAibmFtZSI6ICJBdmFsb246IEltcG9ydCBOb2RlcyIsICJ0eXBlIjog
MSwgIm9iamVjdF90eXBlIjogImluY2lkZW50IiwgImNvbmRpdGlvbnMiOiBbXSwgImF1dG9tYXRp
b25zIjogW10sICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFsiQXZhbG9uIEFjdGlvbnMiXSwgIndv
cmtmbG93cyI6IFtdLCAidmlld19pdGVtcyI6IFtdLCAidGltZW91dF9zZWNvbmRzIjogODY0MDAs
ICJ1dWlkIjogImFmY2Y5MTgzLTg0YTktNGM4YS04YWFjLTg1MTBhZDAyOTcwMCIsICJleHBvcnRf
a2V5IjogIkF2YWxvbjogSW1wb3J0IE5vZGVzIiwgImxvZ2ljX3R5cGUiOiAiYWxsIn1dLCAibGF5
b3V0cyI6IFtdLCAibm90aWZpY2F0aW9ucyI6IG51bGwsICJ0aW1lZnJhbWVzIjogbnVsbCwgImlu
ZHVzdHJpZXMiOiBudWxsLCAicmVndWxhdG9ycyI6IG51bGwsICJnZW9zIjogbnVsbCwgImZ1bmN0
aW9ucyI6IFt7ImlkIjogMiwgIm5hbWUiOiAiYXZhbG9uX3JlZnJlc2giLCAiZGVzY3JpcHRpb24i
OiB7ImZvcm1hdCI6ICJ0ZXh0IiwgImNvbnRlbnQiOiAiUHVsbHMgZGF0YSBmcm9tIGEgbGlua2Vk
IEF2YWxvbiB3b3Jrc3BhY2UuIFJlcXVpcmVzIGFuIEF2YWxvbiBXb3Jrc3BhY2UgYXJ0aWZhY3Qg
dG8gYmUgcHJlc2VudCBpbiB0aGUgaW5jaWRlbnQuIEF2YWxvbiBXb3Jrc3BhY2UgYXJ0aWZhY3Qg
Y2FuIGJlIGNyZWF0ZWQgd2l0aCB0aGUgXCJBdmFsb246IENyZWF0ZSBXb3Jrc3BhY2VcIiBjdXN0
b20gbWVudSBjb21tYW5kLiJ9LCAidXVpZCI6ICI0YmNjMmRmMS1jNjBjLTRmNjItODc5YS0wMjRj
YjE1MGExOWUiLCAidmVyc2lvbiI6IDEsICJjcmVhdG9yIjogeyJpZCI6IDEsICJ0eXBlIjogInVz
ZXIiLCAibmFtZSI6ICJ2YWxAa2luZ2FuZHVuaW9uLmNvbSIsICJkaXNwbGF5X25hbWUiOiAiVmFs
IEthbnRjaGV2In0sICJ3b3JrZmxvd3MiOiBbeyJkZXNjcmlwdGlvbiI6IG51bGwsICJ1dWlkIjog
bnVsbCwgIndvcmtmbG93X2lkIjogMywgIm5hbWUiOiAiQXZhbG9uOiBSZWZyZXNoIiwgInByb2dy
YW1tYXRpY19uYW1lIjogImF2YWxvbl9yZWZyZXNoIiwgIm9iamVjdF90eXBlIjogImluY2lkZW50
IiwgImFjdGlvbnMiOiBbXX1dLCAiZGlzcGxheV9uYW1lIjogIkF2YWxvbjogUmVmcmVzaCIsICJk
ZXN0aW5hdGlvbl9oYW5kbGUiOiAiYXZhbG9uX2FjdGlvbnMiLCAiZXhwb3J0X2tleSI6ICJhdmFs
b25fcmVmcmVzaCIsICJsYXN0X21vZGlmaWVkX2J5IjogeyJpZCI6IDEsICJ0eXBlIjogInVzZXIi
LCAibmFtZSI6ICJ2YWxAa2luZ2FuZHVuaW9uLmNvbSIsICJkaXNwbGF5X25hbWUiOiAiVmFsIEth
bnRjaGV2In0sICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNTQ1ODQzMTMzNzY2LCAidmlld19pdGVt
cyI6IFtdfV0sICJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzMCwgIm1pbm9yIjogMCwgImJ1
aWxkX251bWJlciI6IDM0NzYsICJ2ZXJzaW9uIjogIjMwLjAuMzQ3NiJ9LCAiZXhwb3J0X2Zvcm1h
dF92ZXJzaW9uIjogMiwgImV4cG9ydF9kYXRlIjogMTU0NTk1ODE1NzQ3MSwgImluY2lkZW50X3R5
cGVzIjogW3sidXBkYXRlX2RhdGUiOiAxNTQ1OTU4MTg2OTE2LCAiY3JlYXRlX2RhdGUiOiAxNTQ1
OTU4MTg2OTE2LCAidXVpZCI6ICJiZmVlYzJkNC0zNzcwLTExZTgtYWQzOS00YTAwMDQwNDRhYTAi
LCAiZGVzY3JpcHRpb24iOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImV4
cG9ydF9rZXkiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgIm5hbWUiOiAi
Q3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImVuYWJsZWQiOiBmYWxzZSwgInN5
c3RlbSI6IGZhbHNlLCAicGFyZW50X2lkIjogbnVsbCwgImhpZGRlbiI6IGZhbHNlLCAiaWQiOiAw
fV0sICJhdXRvbWF0aWNfdGFza3MiOiBbXSwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogW3sibmFt
ZSI6ICJBdmFsb24gQWN0aW9ucyIsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJhdmFsb25fYWN0aW9u
cyIsICJkZXN0aW5hdGlvbl90eXBlIjogMCwgImV4cGVjdF9hY2siOiB0cnVlLCAidXNlcnMiOiBb
InZhbEBraW5nYW5kdW5pb24uY29tIl0sICJ1dWlkIjogImMzMzI1MGY0LTc4MTEtNDViNS04NThi
LWQ1OTdkMjI2OWM4MSIsICJleHBvcnRfa2V5IjogImF2YWxvbl9hY3Rpb25zIn1dLCAidGFza19v
cmRlciI6IFtdLCAiYWN0aW9uX29yZGVyIjogW10sICJ0eXBlcyI6IFtdLCAic2NyaXB0cyI6IFtd
LCAiaW5jaWRlbnRfYXJ0aWZhY3RfdHlwZXMiOiBbXSwgIndvcmtmbG93cyI6IFt7ImRlc2NyaXB0
aW9uIjogIlB1bGxzIGRhdGEgZnJvbSBsaW5rZWQgQXZhbG9uIHdvcmtzcGFjZS4gUmVxdWlyZXMg
YW4gQXZhbG9uIFdvcmtzcGFjZSB0byBiZSBsaW5rZWQgdG8gYW4gaW5jaWRlbnQuIFlvdSBjYW4g
Y3JlYXRlIGFuZCBsaW5rIGFuIEF2YWxvbiB3b3Jrc3BhY2UgYXJ0aWZhY3QgYnkgZXhlY3V0aW5n
IHRoZSBcIkF2YWxvbjogQ3JlYXRlIFdvcmtzcGFjZVwiIGN1c3RvbSBtZW51IGNvbW1hbmQuIiwg
InV1aWQiOiAiZDM4YzY3MWYtZmMzOS00NzQxLWIwMTctNzM0ZjAxYmUxNjdjIiwgIndvcmtmbG93
X2lkIjogMywgIm5hbWUiOiAiQXZhbG9uOiBSZWZyZXNoIiwgInByb2dyYW1tYXRpY19uYW1lIjog
ImF2YWxvbl9yZWZyZXNoIiwgIm9iamVjdF90eXBlIjogImluY2lkZW50IiwgImNyZWF0b3JfaWQi
OiAidmFsQGtpbmdhbmR1bmlvbi5jb20iLCAibGFzdF9tb2RpZmllZF9ieSI6ICJ2YWxAa2luZ2Fu
ZHVuaW9uLmNvbSIsICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNTQ1ODQ0NjIyMTY0LCAiZXhwb3J0
X2tleSI6ICJhdmFsb25fcmVmcmVzaCIsICJjb250ZW50IjogeyJ4bWwiOiAiPD94bWwgdmVyc2lv
bj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRlZmluaXRpb25zIHhtbG5zPVwiaHR0cDov
L3d3dy5vbWcub3JnL3NwZWMvQlBNTi8yMDEwMDUyNC9NT0RFTFwiIHhtbG5zOmJwbW5kaT1cImh0
dHA6Ly93d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvRElcIiB4bWxuczpvbWdkYz1cImh0
dHA6Ly93d3cub21nLm9yZy9zcGVjL0RELzIwMTAwNTI0L0RDXCIgeG1sbnM6b21nZGk9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9ESVwiIHhtbG5zOnJlc2lsaWVudD1cImh0
dHA6Ly9yZXNpbGllbnQuaWJtLmNvbS9icG1uXCIgeG1sbnM6eHNkPVwiaHR0cDovL3d3dy53My5v
cmcvMjAwMS9YTUxTY2hlbWFcIiB4bWxuczp4c2k9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hN
TFNjaGVtYS1pbnN0YW5jZVwiIHRhcmdldE5hbWVzcGFjZT1cImh0dHA6Ly93d3cuY2FtdW5kYS5v
cmcvdGVzdFwiPjxwcm9jZXNzIGlkPVwiYXZhbG9uX3JlZnJlc2hcIiBpc0V4ZWN1dGFibGU9XCJ0
cnVlXCIgbmFtZT1cIkF2YWxvbjogUmVmcmVzaFwiPjxkb2N1bWVudGF0aW9uPjwhW0NEQVRBW1B1
bGxzIGRhdGEgZnJvbSBsaW5rZWQgQXZhbG9uIHdvcmtzcGFjZS4gUmVxdWlyZXMgYW4gQXZhbG9u
IFdvcmtzcGFjZSB0byBiZSBsaW5rZWQgdG8gYW4gaW5jaWRlbnQuIFlvdSBjYW4gY3JlYXRlIGFu
ZCBsaW5rIGFuIEF2YWxvbiB3b3Jrc3BhY2UgYXJ0aWZhY3QgYnkgZXhlY3V0aW5nIHRoZSBcIkF2
YWxvbjogQ3JlYXRlIFdvcmtzcGFjZVwiIGN1c3RvbSBtZW51IGNvbW1hbmQuXV0+PC9kb2N1bWVu
dGF0aW9uPjxzdGFydEV2ZW50IGlkPVwiU3RhcnRFdmVudF8xNTVhc3htXCI+PG91dGdvaW5nPlNl
cXVlbmNlRmxvd18weXJlMjRlPC9vdXRnb2luZz48L3N0YXJ0RXZlbnQ+PHNlcnZpY2VUYXNrIGlk
PVwiU2VydmljZVRhc2tfMHViejJnalwiIG5hbWU9XCJBdmFsb246IFJlZnJlc2hcIiByZXNpbGll
bnQ6dHlwZT1cImZ1bmN0aW9uXCI+PGV4dGVuc2lvbkVsZW1lbnRzPjxyZXNpbGllbnQ6ZnVuY3Rp
b24gdXVpZD1cIjRiY2MyZGYxLWM2MGMtNGY2Mi04NzlhLTAyNGNiMTUwYTE5ZVwiPntcImlucHV0
c1wiOnt9fTwvcmVzaWxpZW50OmZ1bmN0aW9uPjwvZXh0ZW5zaW9uRWxlbWVudHM+PGluY29taW5n
PlNlcXVlbmNlRmxvd18weXJlMjRlPC9pbmNvbWluZz48L3NlcnZpY2VUYXNrPjxzZXF1ZW5jZUZs
b3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMHlyZTI0ZVwiIHNvdXJjZVJlZj1cIlN0YXJ0RXZlbnRfMTU1
YXN4bVwiIHRhcmdldFJlZj1cIlNlcnZpY2VUYXNrXzB1YnoyZ2pcIi8+PHRleHRBbm5vdGF0aW9u
IGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiPjx0ZXh0PlN0YXJ0IHlvdXIgd29ya2Zsb3cg
aGVyZTwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9u
XzFzZXVqNDhcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJU
ZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIvPjwvcHJvY2Vzcz48YnBtbmRpOkJQTU5EaWFncmFtIGlk
PVwiQlBNTkRpYWdyYW1fMVwiPjxicG1uZGk6QlBNTlBsYW5lIGJwbW5FbGVtZW50PVwidW5kZWZp
bmVkXCIgaWQ9XCJCUE1OUGxhbmVfMVwiPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwi
U3RhcnRFdmVudF8xNTVhc3htXCIgaWQ9XCJTdGFydEV2ZW50XzE1NWFzeG1fZGlcIj48b21nZGM6
Qm91bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9XCIxNjJcIiB5PVwiMTg4XCIvPjxi
cG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMFwiIHdpZHRoPVwiOTBcIiB4
PVwiMTU3XCIgeT1cIjIyM1wiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBl
PjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwi
IGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dF9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwi
MzBcIiB3aWR0aD1cIjEwMFwiIHg9XCI5OVwiIHk9XCIyNTRcIi8+PC9icG1uZGk6QlBNTlNoYXBl
PjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4XCIgaWQ9
XCJBc3NvY2lhdGlvbl8xc2V1ajQ4X2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCIxNjlcIiB4c2k6
dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIyMFwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjE1M1wi
IHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5FZGdlPjxi
cG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU2VydmljZVRhc2tfMHViejJnalwiIGlkPVwi
U2VydmljZVRhc2tfMHViejJnal9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiODBcIiB3aWR0
aD1cIjEwMFwiIHg9XCIyMjVcIiB5PVwiMTY2XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRp
OkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiU2VxdWVuY2VGbG93XzB5cmUyNGVcIiBpZD1cIlNlcXVl
bmNlRmxvd18weXJlMjRlX2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCIxOThcIiB4c2k6dHlwZT1c
Im9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjIyNVwiIHhzaTp0
eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpC
b3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwiMjExLjVcIiB5PVwiMTg0XCIvPjwv
YnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1ORWRnZT48L2JwbW5kaTpCUE1OUGxhbmU+PC9i
cG1uZGk6QlBNTkRpYWdyYW0+PC9kZWZpbml0aW9ucz4iLCAidmVyc2lvbiI6IDIsICJ3b3JrZmxv
d19pZCI6ICJhdmFsb25fcmVmcmVzaCJ9LCAiYWN0aW9ucyI6IFtdfV0sICJyb2xlcyI6IFtdLCAi
d29ya3NwYWNlcyI6IFtdfQ==
"""
    )