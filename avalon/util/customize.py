# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for avalon"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the avalon package"""
    reload_params = {"package": u"avalon",
                    "incident_fields": [u"avalon_workspace_id"], 
                    "action_fields": [], 
                    "functions_params": [], 
                    "datatables": [], 
                    "message_destinations": [u"avalon_actions"], 
                    "functions": [u"avalon_refresh"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"avalon_refresh"], 
                    "actions": [u"Avalon: Add Node", u"Avalon: Create Workspace", u"Avalon: Pull Workspace Nodes"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Incident fields:
    #     avalon_workspace_id
    #   Message Destinations:
    #     avalon_actions
    #   Functions:
    #     avalon_refresh
    #   Workflows:
    #     avalon_refresh
    #   Rules:
    #     Avalon: Add Node
    #     Avalon: Create Workspace
    #     Avalon: Pull Workspace Nodes


    yield ImportDefinition(u"""
eyJpZCI6IDE4LCAiZmllbGRzIjogW3siY2hvc2VuIjogZmFsc2UsICJpbnRlcm5hbCI6IGZhbHNl
LCAidXVpZCI6ICIzMmU1ODFmYS0yZTZkLTQ5NTQtOGIwZS1mNTY2M2MxZjU5ZjQiLCAib3BlcmF0
aW9ucyI6IFtdLCAidmFsdWVzIjogW10sICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogODAsICJu
YW1lIjogImF2YWxvbl93b3Jrc3BhY2VfaWQiLCAidGV4dCI6ICJBdmFsb24gV29ya3NwYWNlIElE
IiwgInByZWZpeCI6ICJwcm9wZXJ0aWVzIiwgInR5cGVfaWQiOiAwLCAidG9vbHRpcCI6ICJFbnRl
ciBBdmFsb24gV29ya3NwYWNlIElEIHRvIGxpbmsgaXQgdG8gdGhpcyBJbmNpZGVudCAgIiwgInBs
YWNlaG9sZGVyIjogIiIsICJpbnB1dF90eXBlIjogIm51bWJlciIsICJoaWRlX25vdGlmaWNhdGlv
biI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJibGFua19vcHRp
b24iOiBmYWxzZSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAicmVhZF9vbmx5IjogZmFsc2UsICJy
aWNoX3RleHQiOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAiaW5jaWRlbnQvYXZhbG9uX3dvcmtzcGFj
ZV9pZCIsICJ0ZW1wbGF0ZXMiOiBbXX1dLCAicGhhc2VzIjogW10sICJvdmVycmlkZXMiOiBbXSwg
ImFjdGlvbnMiOiBbeyJpZCI6IDE3LCAibmFtZSI6ICJBdmFsb246IEFkZCBOb2RlIiwgInR5cGUi
OiAxLCAib2JqZWN0X3R5cGUiOiAiYXJ0aWZhY3QiLCAiY29uZGl0aW9ucyI6IFt7Im1ldGhvZCI6
ICJub3RfY29udGFpbnMiLCAiZmllbGRfbmFtZSI6ICJhcnRpZmFjdC5kZXNjcmlwdGlvbiIsICJ2
YWx1ZSI6ICJBdmFsb24iLCAidHlwZSI6IG51bGwsICJldmFsdWF0aW9uX2lkIjogM30sIHsibWV0
aG9kIjogImVxdWFscyIsICJmaWVsZF9uYW1lIjogImFydGlmYWN0LnR5cGUiLCAidmFsdWUiOiAi
RE5TIE5hbWUiLCAidHlwZSI6IG51bGwsICJldmFsdWF0aW9uX2lkIjogMX0sIHsibWV0aG9kIjog
ImVxdWFscyIsICJmaWVsZF9uYW1lIjogImFydGlmYWN0LnR5cGUiLCAidmFsdWUiOiAiSVAgQWRk
cmVzcyIsICJ0eXBlIjogbnVsbCwgImV2YWx1YXRpb25faWQiOiAyfV0sICJhdXRvbWF0aW9ucyI6
IFtdLCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbIkF2YWxvbiBBY3Rpb25zIl0sICJ3b3JrZmxv
d3MiOiBbXSwgInZpZXdfaXRlbXMiOiBbXSwgInRpbWVvdXRfc2Vjb25kcyI6IDg2NDAwLCAidXVp
ZCI6ICJlOTA4NzhkOC1iYzVkLTQ4YjYtODFjZC00MTQ4NDE1ZThiNTMiLCAiZXhwb3J0X2tleSI6
ICJBdmFsb246IEFkZCBOb2RlIiwgImxvZ2ljX3R5cGUiOiAiYWR2YW5jZWQiLCAiY3VzdG9tX2Nv
bmRpdGlvbiI6ICIoMSBPUiAyKSBBTkQgMyJ9LCB7ImlkIjogMTgsICJuYW1lIjogIkF2YWxvbjog
Q3JlYXRlIFdvcmtzcGFjZSIsICJ0eXBlIjogMSwgIm9iamVjdF90eXBlIjogImluY2lkZW50Iiwg
ImNvbmRpdGlvbnMiOiBbeyJtZXRob2QiOiAibm90X2hhc19hX3ZhbHVlIiwgImZpZWxkX25hbWUi
OiAiaW5jaWRlbnQucHJvcGVydGllcy5hdmFsb25fd29ya3NwYWNlX2lkIiwgInZhbHVlIjogbnVs
bCwgInR5cGUiOiBudWxsLCAiZXZhbHVhdGlvbl9pZCI6IG51bGx9XSwgImF1dG9tYXRpb25zIjog
W10sICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFsiQXZhbG9uIEFjdGlvbnMiXSwgIndvcmtmbG93
cyI6IFtdLCAidmlld19pdGVtcyI6IFtdLCAidGltZW91dF9zZWNvbmRzIjogODY0MDAsICJ1dWlk
IjogIjI2MWY2YWQyLWJhNjgtNGNkMS1hZDIzLTZiNWZiOWNjYzY5YiIsICJleHBvcnRfa2V5Ijog
IkF2YWxvbjogQ3JlYXRlIFdvcmtzcGFjZSIsICJsb2dpY190eXBlIjogImFsbCJ9LCB7ImlkIjog
MTksICJuYW1lIjogIkF2YWxvbjogUHVsbCBXb3Jrc3BhY2UgTm9kZXMiLCAidHlwZSI6IDEsICJv
YmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJjb25kaXRpb25zIjogW3sibWV0aG9kIjogImhhc19h
X3ZhbHVlIiwgImZpZWxkX25hbWUiOiAiaW5jaWRlbnQucHJvcGVydGllcy5hdmFsb25fd29ya3Nw
YWNlX2lkIiwgInZhbHVlIjogbnVsbCwgInR5cGUiOiBudWxsLCAiZXZhbHVhdGlvbl9pZCI6IG51
bGx9XSwgImF1dG9tYXRpb25zIjogW10sICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFsiQXZhbG9u
IEFjdGlvbnMiXSwgIndvcmtmbG93cyI6IFtdLCAidmlld19pdGVtcyI6IFtdLCAidGltZW91dF9z
ZWNvbmRzIjogODY0MDAsICJ1dWlkIjogImFmY2Y5MTgzLTg0YTktNGM4YS04YWFjLTg1MTBhZDAy
OTcwMCIsICJleHBvcnRfa2V5IjogIkF2YWxvbjogUHVsbCBXb3Jrc3BhY2UgTm9kZXMiLCAibG9n
aWNfdHlwZSI6ICJhbGwifV0sICJsYXlvdXRzIjogW10sICJub3RpZmljYXRpb25zIjogbnVsbCwg
InRpbWVmcmFtZXMiOiBudWxsLCAiaW5kdXN0cmllcyI6IG51bGwsICJyZWd1bGF0b3JzIjogbnVs
bCwgImdlb3MiOiBudWxsLCAiZnVuY3Rpb25zIjogW3siaWQiOiAyLCAibmFtZSI6ICJhdmFsb25f
cmVmcmVzaCIsICJkZXNjcmlwdGlvbiI6IHsiZm9ybWF0IjogInRleHQiLCAiY29udGVudCI6ICJQ
dWxscyBkYXRhIGZyb20gYSBsaW5rZWQgQXZhbG9uIHdvcmtzcGFjZS4gUmVxdWlyZXMgYW4gQXZh
bG9uIFdvcmtzcGFjZSBhcnRpZmFjdCB0byBiZSBwcmVzZW50IGluIHRoZSBpbmNpZGVudC4gQXZh
bG9uIFdvcmtzcGFjZSBhcnRpZmFjdCBjYW4gYmUgY3JlYXRlZCB3aXRoIHRoZSBcIkF2YWxvbjog
Q3JlYXRlIFdvcmtzcGFjZVwiIGN1c3RvbSBtZW51IGNvbW1hbmQuIn0sICJ1dWlkIjogIjRiY2My
ZGYxLWM2MGMtNGY2Mi04NzlhLTAyNGNiMTUwYTE5ZSIsICJ2ZXJzaW9uIjogMiwgImNyZWF0b3Ii
OiB7ImlkIjogMSwgInR5cGUiOiAidXNlciIsICJuYW1lIjogInZhbEBraW5nYW5kdW5pb24uY29t
IiwgImRpc3BsYXlfbmFtZSI6ICJWYWwgS2FudGNoZXYifSwgIndvcmtmbG93cyI6IFt7ImRlc2Ny
aXB0aW9uIjogbnVsbCwgInV1aWQiOiBudWxsLCAid29ya2Zsb3dfaWQiOiA0LCAibmFtZSI6ICJB
dmFsb246IFJlZnJlc2giLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiYXZhbG9uX3JlZnJlc2giLCAi
b2JqZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAiYWN0aW9ucyI6IFtdfV0sICJkaXNwbGF5X25hbWUi
OiAiQXZhbG9uOiBSZWZyZXNoIiwgImRlc3RpbmF0aW9uX2hhbmRsZSI6ICJhdmFsb25fYWN0aW9u
cyIsICJleHBvcnRfa2V5IjogImF2YWxvbl9yZWZyZXNoIiwgImxhc3RfbW9kaWZpZWRfYnkiOiB7
ImlkIjogMSwgInR5cGUiOiAidXNlciIsICJuYW1lIjogInZhbEBraW5nYW5kdW5pb24uY29tIiwg
ImRpc3BsYXlfbmFtZSI6ICJWYWwgS2FudGNoZXYifSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1
NDY0NjA1OTE1NzgsICJ2aWV3X2l0ZW1zIjogW119XSwgInNlcnZlcl92ZXJzaW9uIjogeyJtYWpv
ciI6IDMwLCAibWlub3IiOiAwLCAiYnVpbGRfbnVtYmVyIjogMzQ3NiwgInZlcnNpb24iOiAiMzAu
MC4zNDc2In0sICJleHBvcnRfZm9ybWF0X3ZlcnNpb24iOiAyLCAiZXhwb3J0X2RhdGUiOiAxNTQ2
NDY2MjEzNTkxLCAiaW5jaWRlbnRfdHlwZXMiOiBbeyJ1cGRhdGVfZGF0ZSI6IDE1NDY0NjYyMTcw
MjMsICJjcmVhdGVfZGF0ZSI6IDE1NDY0NjYyMTcwMjMsICJ1dWlkIjogImJmZWVjMmQ0LTM3NzAt
MTFlOC1hZDM5LTRhMDAwNDA0NGFhMCIsICJkZXNjcmlwdGlvbiI6ICJDdXN0b21pemF0aW9uIFBh
Y2thZ2VzIChpbnRlcm5hbCkiLCAiZXhwb3J0X2tleSI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2Vz
IChpbnRlcm5hbCkiLCAibmFtZSI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCki
LCAiZW5hYmxlZCI6IGZhbHNlLCAic3lzdGVtIjogZmFsc2UsICJwYXJlbnRfaWQiOiBudWxsLCAi
aGlkZGVuIjogZmFsc2UsICJpZCI6IDB9XSwgImF1dG9tYXRpY190YXNrcyI6IFtdLCAibWVzc2Fn
ZV9kZXN0aW5hdGlvbnMiOiBbeyJuYW1lIjogIkF2YWxvbiBBY3Rpb25zIiwgInByb2dyYW1tYXRp
Y19uYW1lIjogImF2YWxvbl9hY3Rpb25zIiwgImRlc3RpbmF0aW9uX3R5cGUiOiAwLCAiZXhwZWN0
X2FjayI6IHRydWUsICJ1c2VycyI6IFsidmFsQGtpbmdhbmR1bmlvbi5jb20iXSwgInV1aWQiOiAi
YzMzMjUwZjQtNzgxMS00NWI1LTg1OGItZDU5N2QyMjY5YzgxIiwgImV4cG9ydF9rZXkiOiAiYXZh
bG9uX2FjdGlvbnMifV0sICJ0YXNrX29yZGVyIjogW10sICJhY3Rpb25fb3JkZXIiOiBbXSwgInR5
cGVzIjogW10sICJzY3JpcHRzIjogW10sICJpbmNpZGVudF9hcnRpZmFjdF90eXBlcyI6IFtdLCAi
d29ya2Zsb3dzIjogW3siZGVzY3JpcHRpb24iOiAiUHVsbHMgZGF0YSBmcm9tIGxpbmtlZCBBdmFs
b24gd29ya3NwYWNlLiBSZXF1aXJlcyBhbiBBdmFsb24gV29ya3NwYWNlIHRvIGJlIGxpbmtlZCB0
byBhbiBpbmNpZGVudC4gWW91IGNhbiBjcmVhdGUgYW5kIGxpbmsgYW4gQXZhbG9uIHdvcmtzcGFj
ZSBhcnRpZmFjdCBieSBleGVjdXRpbmcgdGhlIFwiQXZhbG9uOiBDcmVhdGUgV29ya3NwYWNlXCIg
Y3VzdG9tIG1lbnUgY29tbWFuZC4iLCAidXVpZCI6ICJkMzhjNjcxZi1mYzM5LTQ3NDEtYjAxNy03
MzRmMDFiZTE2N2MiLCAid29ya2Zsb3dfaWQiOiA0LCAibmFtZSI6ICJBdmFsb246IFJlZnJlc2gi
LCAicHJvZ3JhbW1hdGljX25hbWUiOiAiYXZhbG9uX3JlZnJlc2giLCAib2JqZWN0X3R5cGUiOiAi
aW5jaWRlbnQiLCAiY3JlYXRvcl9pZCI6ICJ2YWxAa2luZ2FuZHVuaW9uLmNvbSIsICJsYXN0X21v
ZGlmaWVkX2J5IjogInZhbEBraW5nYW5kdW5pb24uY29tIiwgImxhc3RfbW9kaWZpZWRfdGltZSI6
IDE1NDY0NjA1OTIzMTcsICJleHBvcnRfa2V5IjogImF2YWxvbl9yZWZyZXNoIiwgImNvbnRlbnQi
OiB7InhtbCI6ICI8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz48ZGVm
aW5pdGlvbnMgeG1sbnM9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L01P
REVMXCIgeG1sbnM6YnBtbmRpPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvQlBNTi8yMDEwMDUy
NC9ESVwiIHhtbG5zOm9tZ2RjPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQv
RENcIiB4bWxuczpvbWdkaT1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0RELzIwMTAwNTI0L0RJ
XCIgeG1sbnM6cmVzaWxpZW50PVwiaHR0cDovL3Jlc2lsaWVudC5pYm0uY29tL2JwbW5cIiB4bWxu
czp4c2Q9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYVwiIHhtbG5zOnhzaT1cImh0
dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlXCIgdGFyZ2V0TmFtZXNwYWNl
PVwiaHR0cDovL3d3dy5jYW11bmRhLm9yZy90ZXN0XCI+PHByb2Nlc3MgaWQ9XCJhdmFsb25fcmVm
cmVzaFwiIGlzRXhlY3V0YWJsZT1cInRydWVcIiBuYW1lPVwiQXZhbG9uOiBSZWZyZXNoXCI+PGRv
Y3VtZW50YXRpb24+PCFbQ0RBVEFbUHVsbHMgZGF0YSBmcm9tIGxpbmtlZCBBdmFsb24gd29ya3Nw
YWNlLiBSZXF1aXJlcyBhbiBBdmFsb24gV29ya3NwYWNlIHRvIGJlIGxpbmtlZCB0byBhbiBpbmNp
ZGVudC4gWW91IGNhbiBjcmVhdGUgYW5kIGxpbmsgYW4gQXZhbG9uIHdvcmtzcGFjZSBhcnRpZmFj
dCBieSBleGVjdXRpbmcgdGhlIFwiQXZhbG9uOiBDcmVhdGUgV29ya3NwYWNlXCIgY3VzdG9tIG1l
bnUgY29tbWFuZC5dXT48L2RvY3VtZW50YXRpb24+PHN0YXJ0RXZlbnQgaWQ9XCJTdGFydEV2ZW50
XzE1NWFzeG1cIj48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzB5cmUyNGU8L291dGdvaW5nPjwvc3Rh
cnRFdmVudD48c2VydmljZVRhc2sgaWQ9XCJTZXJ2aWNlVGFza18wdWJ6MmdqXCIgbmFtZT1cIkF2
YWxvbjogUmVmcmVzaFwiIHJlc2lsaWVudDp0eXBlPVwiZnVuY3Rpb25cIj48ZXh0ZW5zaW9uRWxl
bWVudHM+PHJlc2lsaWVudDpmdW5jdGlvbiB1dWlkPVwiNGJjYzJkZjEtYzYwYy00ZjYyLTg3OWEt
MDI0Y2IxNTBhMTllXCI+e1wiaW5wdXRzXCI6e319PC9yZXNpbGllbnQ6ZnVuY3Rpb24+PC9leHRl
bnNpb25FbGVtZW50cz48aW5jb21pbmc+U2VxdWVuY2VGbG93XzB5cmUyNGU8L2luY29taW5nPjwv
c2VydmljZVRhc2s+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18weXJlMjRlXCIgc291
cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiU2VydmljZVRhc2tfMHVi
ejJnalwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCI+PHRl
eHQ+U3RhcnQgeW91ciB3b3JrZmxvdyBoZXJlPC90ZXh0PjwvdGV4dEFubm90YXRpb24+PGFzc29j
aWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIHNvdXJjZVJlZj1cIlN0YXJ0RXZlbnRf
MTU1YXN4bVwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIi8+PC9wcm9jZXNz
PjxicG1uZGk6QlBNTkRpYWdyYW0gaWQ9XCJCUE1ORGlhZ3JhbV8xXCI+PGJwbW5kaTpCUE1OUGxh
bmUgYnBtbkVsZW1lbnQ9XCJ1bmRlZmluZWRcIiBpZD1cIkJQTU5QbGFuZV8xXCI+PGJwbW5kaTpC
UE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiBpZD1cIlN0YXJ0RXZl
bnRfMTU1YXN4bV9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2XCIg
eD1cIjE2MlwiIHk9XCIxODhcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWln
aHQ9XCIwXCIgd2lkdGg9XCI5MFwiIHg9XCIxNTdcIiB5PVwiMjIzXCIvPjwvYnBtbmRpOkJQTU5M
YWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJU
ZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0X2RpXCI+
PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzMFwiIHdpZHRoPVwiMTAwXCIgeD1cIjk5XCIgeT1cIjI1
NFwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIkFz
c29jaWF0aW9uXzFzZXVqNDhcIiBpZD1cIkFzc29jaWF0aW9uXzFzZXVqNDhfZGlcIj48b21nZGk6
d2F5cG9pbnQgeD1cIjE2OVwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjIwXCIvPjxv
bWdkaTp3YXlwb2ludCB4PVwiMTUzXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyNTRc
Ii8+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJTZXJ2
aWNlVGFza18wdWJ6MmdqXCIgaWQ9XCJTZXJ2aWNlVGFza18wdWJ6MmdqX2RpXCI+PG9tZ2RjOkJv
dW5kcyBoZWlnaHQ9XCI4MFwiIHdpZHRoPVwiMTAwXCIgeD1cIjIyNVwiIHk9XCIxNjZcIi8+PC9i
cG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5jZUZs
b3dfMHlyZTI0ZVwiIGlkPVwiU2VxdWVuY2VGbG93XzB5cmUyNGVfZGlcIj48b21nZGk6d2F5cG9p
bnQgeD1cIjE5OFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxvbWdkaTp3
YXlwb2ludCB4PVwiMjI1XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PGJw
bW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9
XCIyMTEuNVwiIHk9XCIxODRcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdl
PjwvYnBtbmRpOkJQTU5QbGFuZT48L2JwbW5kaTpCUE1ORGlhZ3JhbT48L2RlZmluaXRpb25zPiIs
ICJ2ZXJzaW9uIjogMSwgIndvcmtmbG93X2lkIjogImF2YWxvbl9yZWZyZXNoIn0sICJhY3Rpb25z
IjogW119XSwgInJvbGVzIjogW10sICJ3b3Jrc3BhY2VzIjogW119
"""
    )