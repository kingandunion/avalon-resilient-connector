# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for avalon"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the avalon package"""
    reload_params = {"package": u"avalon",
                    "incident_fields": [u"avalon_workspace_id"], 
                    "action_fields": [], 
                    "functions_params": [], 
                    "datatables": [], 
                    "message_destinations": [u"avalon_actions"], 
                    "functions": [u"avalon_refresh"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"avalon_refresh"], 
                    "actions": [u"Avalon: Create Workspace", u"Avalon: Pull All Nodes", u"Avalon: Push All Artifacts", u"Avalon: Push Artifact"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Incident fields:
    #     avalon_workspace_id
    #   Message Destinations:
    #     avalon_actions
    #   Functions:
    #     avalon_refresh
    #   Workflows:
    #     avalon_refresh
    #   Rules:
    #     Avalon: Create Workspace
    #     Avalon: Pull All Nodes
    #     Avalon: Push All Artifacts
    #     Avalon: Push Artifact


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJwcm9ncmFtbWF0aWNfbmFtZSI6ICJh
dmFsb25fcmVmcmVzaCIsICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJleHBvcnRfa2V5Ijog
ImF2YWxvbl9yZWZyZXNoIiwgInV1aWQiOiAiZDM4YzY3MWYtZmMzOS00NzQxLWIwMTctNzM0ZjAx
YmUxNjdjIiwgImxhc3RfbW9kaWZpZWRfYnkiOiAidmFsQGtpbmdhbmR1bmlvbi5jb20iLCAibmFt
ZSI6ICJBdmFsb246IFJlZnJlc2giLCAiY29udGVudCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249
XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93
d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDov
L3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRw
Oi8vcmVzaWxpZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3Jn
LzIwMDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxT
Y2hlbWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3Jn
L3Rlc3RcIj48cHJvY2VzcyBpZD1cImF2YWxvbl9yZWZyZXNoXCIgaXNFeGVjdXRhYmxlPVwidHJ1
ZVwiIG5hbWU9XCJBdmFsb246IFJlZnJlc2hcIj48ZG9jdW1lbnRhdGlvbj48IVtDREFUQVtQdWxs
cyBkYXRhIGZyb20gbGlua2VkIEF2YWxvbiB3b3Jrc3BhY2UuIFJlcXVpcmVzIGFuIEF2YWxvbiBX
b3Jrc3BhY2UgdG8gYmUgbGlua2VkIHRvIGFuIGluY2lkZW50LiBZb3UgY2FuIGNyZWF0ZSBhbmQg
bGluayBhbiBBdmFsb24gd29ya3NwYWNlIGFydGlmYWN0IGJ5IGV4ZWN1dGluZyB0aGUgXCJBdmFs
b246IENyZWF0ZSBXb3Jrc3BhY2VcIiBjdXN0b20gbWVudSBjb21tYW5kLl1dPjwvZG9jdW1lbnRh
dGlvbj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiPjxvdXRnb2luZz5TZXF1
ZW5jZUZsb3dfMHlyZTI0ZTwvb3V0Z29pbmc+PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1c
IlNlcnZpY2VUYXNrXzB1YnoyZ2pcIiBuYW1lPVwiQXZhbG9uOiBSZWZyZXNoXCIgcmVzaWxpZW50
OnR5cGU9XCJmdW5jdGlvblwiPjxleHRlbnNpb25FbGVtZW50cz48cmVzaWxpZW50OmZ1bmN0aW9u
IHV1aWQ9XCI0YmNjMmRmMS1jNjBjLTRmNjItODc5YS0wMjRjYjE1MGExOWVcIj57XCJpbnB1dHNc
Ijp7fX08L3Jlc2lsaWVudDpmdW5jdGlvbj48L2V4dGVuc2lvbkVsZW1lbnRzPjxpbmNvbWluZz5T
ZXF1ZW5jZUZsb3dfMHlyZTI0ZTwvaW5jb21pbmc+PC9zZXJ2aWNlVGFzaz48c2VxdWVuY2VGbG93
IGlkPVwiU2VxdWVuY2VGbG93XzB5cmUyNGVcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFz
eG1cIiB0YXJnZXRSZWY9XCJTZXJ2aWNlVGFza18wdWJ6MmdqXCIvPjx0ZXh0QW5ub3RhdGlvbiBp
ZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIj48dGV4dD5TdGFydCB5b3VyIHdvcmtmbG93IGhl
cmU8L3RleHQ+PC90ZXh0QW5ub3RhdGlvbj48YXNzb2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlvbl8x
c2V1ajQ4XCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiVGV4
dEFubm90YXRpb25fMWt4eGl5dFwiLz48L3Byb2Nlc3M+PGJwbW5kaTpCUE1ORGlhZ3JhbSBpZD1c
IkJQTU5EaWFncmFtXzFcIj48YnBtbmRpOkJQTU5QbGFuZSBicG1uRWxlbWVudD1cInVuZGVmaW5l
ZFwiIGlkPVwiQlBNTlBsYW5lXzFcIj48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlN0
YXJ0RXZlbnRfMTU1YXN4bVwiIGlkPVwiU3RhcnRFdmVudF8xNTVhc3htX2RpXCI+PG9tZ2RjOkJv
dW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4PVwiMTYyXCIgeT1cIjE4OFwiLz48YnBt
bmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjBcIiB3aWR0aD1cIjkwXCIgeD1c
IjE1N1wiIHk9XCIyMjNcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48
YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIiBp
ZD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjMw
XCIgd2lkdGg9XCIxMDBcIiB4PVwiOTlcIiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48
YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIGlkPVwi
QXNzb2NpYXRpb25fMXNldWo0OF9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMTY5XCIgeHNpOnR5
cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMjBcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIxNTNcIiB4
c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1ORWRnZT48YnBt
bmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlNlcnZpY2VUYXNrXzB1YnoyZ2pcIiBpZD1cIlNl
cnZpY2VUYXNrXzB1YnoyZ2pfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjgwXCIgd2lkdGg9
XCIxMDBcIiB4PVwiMjI1XCIgeT1cIjE2NlwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpC
UE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18weXJlMjRlXCIgaWQ9XCJTZXF1ZW5j
ZUZsb3dfMHlyZTI0ZV9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMTk4XCIgeHNpOnR5cGU9XCJv
bWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIyMjVcIiB4c2k6dHlw
ZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91
bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjIxMS41XCIgeT1cIjE4NFwiLz48L2Jw
bW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PC9icG1uZGk6QlBNTlBsYW5lPjwvYnBt
bmRpOkJQTU5EaWFncmFtPjwvZGVmaW5pdGlvbnM+IiwgIndvcmtmbG93X2lkIjogImF2YWxvbl9y
ZWZyZXNoIiwgInZlcnNpb24iOiAzfSwgIndvcmtmbG93X2lkIjogNCwgImFjdGlvbnMiOiBbXSwg
Imxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NDY0NzcyOTcyMDgsICJjcmVhdG9yX2lkIjogInZhbEBr
aW5nYW5kdW5pb24uY29tIiwgImRlc2NyaXB0aW9uIjogIlB1bGxzIGRhdGEgZnJvbSBsaW5rZWQg
QXZhbG9uIHdvcmtzcGFjZS4gUmVxdWlyZXMgYW4gQXZhbG9uIFdvcmtzcGFjZSB0byBiZSBsaW5r
ZWQgdG8gYW4gaW5jaWRlbnQuIFlvdSBjYW4gY3JlYXRlIGFuZCBsaW5rIGFuIEF2YWxvbiB3b3Jr
c3BhY2UgYXJ0aWZhY3QgYnkgZXhlY3V0aW5nIHRoZSBcIkF2YWxvbjogQ3JlYXRlIFdvcmtzcGFj
ZVwiIGN1c3RvbSBtZW51IGNvbW1hbmQuIn1dLCAiYWN0aW9ucyI6IFt7ImxvZ2ljX3R5cGUiOiAi
YWxsIiwgIm5hbWUiOiAiQXZhbG9uOiBDcmVhdGUgV29ya3NwYWNlIiwgInZpZXdfaXRlbXMiOiBb
XSwgInR5cGUiOiAxLCAid29ya2Zsb3dzIjogW10sICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIs
ICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiMjYxZjZhZDItYmE2OC00Y2QxLWFk
MjMtNmI1ZmI5Y2NjNjliIiwgImF1dG9tYXRpb25zIjogW10sICJleHBvcnRfa2V5IjogIkF2YWxv
bjogQ3JlYXRlIFdvcmtzcGFjZSIsICJjb25kaXRpb25zIjogW3sidHlwZSI6IG51bGwsICJldmFs
dWF0aW9uX2lkIjogbnVsbCwgImZpZWxkX25hbWUiOiAiaW5jaWRlbnQucHJvcGVydGllcy5hdmFs
b25fd29ya3NwYWNlX2lkIiwgIm1ldGhvZCI6ICJub3RfaGFzX2FfdmFsdWUiLCAidmFsdWUiOiBu
dWxsfV0sICJpZCI6IDE4LCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbImF2YWxvbl9hY3Rpb25z
Il19LCB7ImxvZ2ljX3R5cGUiOiAiYWxsIiwgIm5hbWUiOiAiQXZhbG9uOiBQdWxsIEFsbCBOb2Rl
cyIsICJ2aWV3X2l0ZW1zIjogW10sICJ0eXBlIjogMSwgIndvcmtmbG93cyI6IFtdLCAib2JqZWN0
X3R5cGUiOiAiaW5jaWRlbnQiLCAidGltZW91dF9zZWNvbmRzIjogODY0MDAsICJ1dWlkIjogImFm
Y2Y5MTgzLTg0YTktNGM4YS04YWFjLTg1MTBhZDAyOTcwMCIsICJhdXRvbWF0aW9ucyI6IFtdLCAi
ZXhwb3J0X2tleSI6ICJBdmFsb246IFB1bGwgQWxsIE5vZGVzIiwgImNvbmRpdGlvbnMiOiBbeyJ0
eXBlIjogbnVsbCwgImV2YWx1YXRpb25faWQiOiBudWxsLCAiZmllbGRfbmFtZSI6ICJpbmNpZGVu
dC5wcm9wZXJ0aWVzLmF2YWxvbl93b3Jrc3BhY2VfaWQiLCAibWV0aG9kIjogImhhc19hX3ZhbHVl
IiwgInZhbHVlIjogbnVsbH1dLCAiaWQiOiAxOSwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogWyJh
dmFsb25fYWN0aW9ucyJdfSwgeyJsb2dpY190eXBlIjogImFsbCIsICJuYW1lIjogIkF2YWxvbjog
UHVzaCBBbGwgQXJ0aWZhY3RzIiwgInZpZXdfaXRlbXMiOiBbXSwgInR5cGUiOiAxLCAid29ya2Zs
b3dzIjogW10sICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJ0aW1lb3V0X3NlY29uZHMiOiA4
NjQwMCwgInV1aWQiOiAiNGI1MWIwYzgtM2QyOS00YzFjLTk0MTMtNzEwOWM4ZGQ1YzUyIiwgImF1
dG9tYXRpb25zIjogW10sICJleHBvcnRfa2V5IjogIkF2YWxvbjogUHVzaCBBbGwgQXJ0aWZhY3Rz
IiwgImNvbmRpdGlvbnMiOiBbeyJ0eXBlIjogbnVsbCwgImV2YWx1YXRpb25faWQiOiBudWxsLCAi
ZmllbGRfbmFtZSI6ICJpbmNpZGVudC5wcm9wZXJ0aWVzLmF2YWxvbl93b3Jrc3BhY2VfaWQiLCAi
bWV0aG9kIjogImhhc19hX3ZhbHVlIiwgInZhbHVlIjogbnVsbH1dLCAiaWQiOiAyMCwgIm1lc3Nh
Z2VfZGVzdGluYXRpb25zIjogWyJhdmFsb25fYWN0aW9ucyJdfSwgeyJsb2dpY190eXBlIjogImFk
dmFuY2VkIiwgIm5hbWUiOiAiQXZhbG9uOiBQdXNoIEFydGlmYWN0IiwgInZpZXdfaXRlbXMiOiBb
XSwgInR5cGUiOiAxLCAid29ya2Zsb3dzIjogW10sICJvYmplY3RfdHlwZSI6ICJhcnRpZmFjdCIs
ICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiZTkwODc4ZDgtYmM1ZC00OGI2LTgx
Y2QtNDE0ODQxNWU4YjUzIiwgImN1c3RvbV9jb25kaXRpb24iOiAiNCBBTkQgKDEgT1IgMikgQU5E
IDMiLCAiYXV0b21hdGlvbnMiOiBbXSwgImV4cG9ydF9rZXkiOiAiQXZhbG9uOiBQdXNoIEFydGlm
YWN0IiwgImNvbmRpdGlvbnMiOiBbeyJ0eXBlIjogbnVsbCwgImV2YWx1YXRpb25faWQiOiAzLCAi
ZmllbGRfbmFtZSI6ICJhcnRpZmFjdC5kZXNjcmlwdGlvbiIsICJtZXRob2QiOiAibm90X2NvbnRh
aW5zIiwgInZhbHVlIjogIkF2YWxvbiJ9LCB7InR5cGUiOiBudWxsLCAiZXZhbHVhdGlvbl9pZCI6
IDIsICJmaWVsZF9uYW1lIjogImFydGlmYWN0LnR5cGUiLCAibWV0aG9kIjogImVxdWFscyIsICJ2
YWx1ZSI6ICJJUCBBZGRyZXNzIn0sIHsidHlwZSI6IG51bGwsICJldmFsdWF0aW9uX2lkIjogMSwg
ImZpZWxkX25hbWUiOiAiYXJ0aWZhY3QudHlwZSIsICJtZXRob2QiOiAiZXF1YWxzIiwgInZhbHVl
IjogIkROUyBOYW1lIn0sIHsidHlwZSI6IG51bGwsICJldmFsdWF0aW9uX2lkIjogNCwgImZpZWxk
X25hbWUiOiAiaW5jaWRlbnQucHJvcGVydGllcy5hdmFsb25fd29ya3NwYWNlX2lkIiwgIm1ldGhv
ZCI6ICJoYXNfYV92YWx1ZSIsICJ2YWx1ZSI6IG51bGx9XSwgImlkIjogMTcsICJtZXNzYWdlX2Rl
c3RpbmF0aW9ucyI6IFsiYXZhbG9uX2FjdGlvbnMiXX1dLCAibGF5b3V0cyI6IFtdLCAiZXhwb3J0
X2Zvcm1hdF92ZXJzaW9uIjogMiwgImlkIjogMjEsICJpbmR1c3RyaWVzIjogbnVsbCwgInBoYXNl
cyI6IFtdLCAiYWN0aW9uX29yZGVyIjogW10sICJnZW9zIjogbnVsbCwgInNlcnZlcl92ZXJzaW9u
IjogeyJtYWpvciI6IDMwLCAidmVyc2lvbiI6ICIzMC4wLjM0NzYiLCAiYnVpbGRfbnVtYmVyIjog
MzQ3NiwgIm1pbm9yIjogMH0sICJ0aW1lZnJhbWVzIjogbnVsbCwgIndvcmtzcGFjZXMiOiBbXSwg
ImF1dG9tYXRpY190YXNrcyI6IFtdLCAiZnVuY3Rpb25zIjogW3siZGlzcGxheV9uYW1lIjogIkF2
YWxvbjogUmVmcmVzaCIsICJ1dWlkIjogIjRiY2MyZGYxLWM2MGMtNGY2Mi04NzlhLTAyNGNiMTUw
YTE5ZSIsICJjcmVhdG9yIjogeyJkaXNwbGF5X25hbWUiOiAiVmFsIEthbnRjaGV2IiwgInR5cGUi
OiAidXNlciIsICJpZCI6IDEsICJuYW1lIjogInZhbEBraW5nYW5kdW5pb24uY29tIn0sICJ2aWV3
X2l0ZW1zIjogW10sICJleHBvcnRfa2V5IjogImF2YWxvbl9yZWZyZXNoIiwgImxhc3RfbW9kaWZp
ZWRfYnkiOiB7ImRpc3BsYXlfbmFtZSI6ICJWYWwgS2FudGNoZXYiLCAidHlwZSI6ICJ1c2VyIiwg
ImlkIjogMSwgIm5hbWUiOiAidmFsQGtpbmdhbmR1bmlvbi5jb20ifSwgIm5hbWUiOiAiYXZhbG9u
X3JlZnJlc2giLCAidmVyc2lvbiI6IDIsICJ3b3JrZmxvd3MiOiBbeyJwcm9ncmFtbWF0aWNfbmFt
ZSI6ICJhdmFsb25fcmVmcmVzaCIsICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJ1dWlkIjog
bnVsbCwgImFjdGlvbnMiOiBbXSwgIm5hbWUiOiAiQXZhbG9uOiBSZWZyZXNoIiwgIndvcmtmbG93
X2lkIjogNCwgImRlc2NyaXB0aW9uIjogbnVsbH1dLCAibGFzdF9tb2RpZmllZF90aW1lIjogMTU0
NjQ2MDU5MTU3OCwgImRlc3RpbmF0aW9uX2hhbmRsZSI6ICJhdmFsb25fYWN0aW9ucyIsICJpZCI6
IDIsICJkZXNjcmlwdGlvbiI6IHsiY29udGVudCI6ICJQdWxscyBkYXRhIGZyb20gYSBsaW5rZWQg
QXZhbG9uIHdvcmtzcGFjZS4gUmVxdWlyZXMgYW4gQXZhbG9uIFdvcmtzcGFjZSBhcnRpZmFjdCB0
byBiZSBwcmVzZW50IGluIHRoZSBpbmNpZGVudC4gQXZhbG9uIFdvcmtzcGFjZSBhcnRpZmFjdCBj
YW4gYmUgY3JlYXRlZCB3aXRoIHRoZSBcIkF2YWxvbjogQ3JlYXRlIFdvcmtzcGFjZVwiIGN1c3Rv
bSBtZW51IGNvbW1hbmQuIiwgImZvcm1hdCI6ICJ0ZXh0In19XSwgIm5vdGlmaWNhdGlvbnMiOiBu
dWxsLCAicmVndWxhdG9ycyI6IG51bGwsICJpbmNpZGVudF90eXBlcyI6IFt7ImNyZWF0ZV9kYXRl
IjogMTU0NjQ3NzI5NTUxNSwgImRlc2NyaXB0aW9uIjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMg
KGludGVybmFsKSIsICJleHBvcnRfa2V5IjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVy
bmFsKSIsICJpZCI6IDAsICJuYW1lIjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFs
KSIsICJ1cGRhdGVfZGF0ZSI6IDE1NDY0NzcyOTU1MTUsICJ1dWlkIjogImJmZWVjMmQ0LTM3NzAt
MTFlOC1hZDM5LTRhMDAwNDA0NGFhMCIsICJlbmFibGVkIjogZmFsc2UsICJzeXN0ZW0iOiBmYWxz
ZSwgInBhcmVudF9pZCI6IG51bGwsICJoaWRkZW4iOiBmYWxzZX1dLCAic2NyaXB0cyI6IFtdLCAi
dHlwZXMiOiBbXSwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogW3sidXVpZCI6ICJjMzMyNTBmNC03
ODExLTQ1YjUtODU4Yi1kNTk3ZDIyNjljODEiLCAiZXhwb3J0X2tleSI6ICJhdmFsb25fYWN0aW9u
cyIsICJuYW1lIjogImF2YWxvbl9hY3Rpb25zIiwgImRlc3RpbmF0aW9uX3R5cGUiOiAwLCAicHJv
Z3JhbW1hdGljX25hbWUiOiAiYXZhbG9uX2FjdGlvbnMiLCAiZXhwZWN0X2FjayI6IHRydWUsICJ1
c2VycyI6IFsidmFsQGtpbmdhbmR1bmlvbi5jb20iXX1dLCAiaW5jaWRlbnRfYXJ0aWZhY3RfdHlw
ZXMiOiBbXSwgInJvbGVzIjogW10sICJmaWVsZHMiOiBbeyJvcGVyYXRpb25zIjogW10sICJ0eXBl
X2lkIjogMCwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJBdmFsb24gV29ya3NwYWNl
IElEIiwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAicHJlZml4IjogInByb3BlcnRpZXMiLCAiY2hh
bmdlYWJsZSI6IHRydWUsICJpZCI6IDgwLCAicmVhZF9vbmx5IjogZmFsc2UsICJ1dWlkIjogIjMy
ZTU4MWZhLTJlNmQtNDk1NC04YjBlLWY1NjYzYzFmNTlmNCIsICJjaG9zZW4iOiBmYWxzZSwgImlu
cHV0X3R5cGUiOiAibnVtYmVyIiwgInRvb2x0aXAiOiAiRW50ZXIgQXZhbG9uIFdvcmtzcGFjZSBJ
RCB0byBsaW5rIGl0IHRvIHRoaXMgSW5jaWRlbnQgICIsICJpbnRlcm5hbCI6IGZhbHNlLCAicmlj
aF90ZXh0IjogZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAiaW5jaWRlbnQv
YXZhbG9uX3dvcmtzcGFjZV9pZCIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicGxhY2Vo
b2xkZXIiOiAiIiwgIm5hbWUiOiAiYXZhbG9uX3dvcmtzcGFjZV9pZCIsICJkZWZhdWx0X2Nob3Nl
bl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInZhbHVlcyI6IFtdfV0sICJvdmVycmlkZXMiOiBbXSwgImV4
cG9ydF9kYXRlIjogMTU0NjQ3NzMwNjIxM30=
"""
    )