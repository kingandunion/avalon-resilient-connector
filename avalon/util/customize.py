# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for avalon"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the avalon package"""
    reload_params = {"package": u"avalon",
                    "incident_fields": [u"avalon_auto_refresh", u"avalon_auto_refresh_time", u"avalon_last_pull_time", u"avalon_workspace_id"], 
                    "action_fields": [], 
                    "function_params": [u"incident_id", u"incident_name"], 
                    "datatables": [], 
                    "message_destinations": [u"avalon_actions"], 
                    "functions": [u"avalon_refresh"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [],
                    "actions": [u"Avalon: Create Workspace", u"Avalon: Pull Nodes", u"Avalon: Push Artifact", u"Avalon: Push Artifacts", u"Avalon: Start Auto-refresh", u"Avalon: Stop Auto-refresh"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Incident fields:
    #     avalon_auto_refresh
    #     avalon_auto_refresh_time
    #     avalon_last_pull_time
    #     avalon_workspace_id
    #   Function inputs:
    #     incident_id
    #     incident_name
    #   Message Destinations:
    #     avalon_actions
    #   Functions:
    #     avalon_refresh
    #   Rules:
    #     Avalon: Create Workspace
    #     Avalon: Pull Nodes
    #     Avalon: Push Artifact
    #     Avalon: Push Artifacts
    #     Avalon: Start Auto-refresh
    #     Avalon: Stop Auto-refresh


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbXSwgImFjdGlvbnMiOiBbeyJsb2dpY190
eXBlIjogImFsbCIsICJuYW1lIjogIkF2YWxvbjogQ3JlYXRlIFdvcmtzcGFjZSIsICJ2aWV3X2l0
ZW1zIjogW10sICJ0eXBlIjogMSwgIndvcmtmbG93cyI6IFtdLCAib2JqZWN0X3R5cGUiOiAiaW5j
aWRlbnQiLCAidGltZW91dF9zZWNvbmRzIjogODY0MDAsICJ1dWlkIjogIjI2MWY2YWQyLWJhNjgt
NGNkMS1hZDIzLTZiNWZiOWNjYzY5YiIsICJhdXRvbWF0aW9ucyI6IFtdLCAiZXhwb3J0X2tleSI6
ICJBdmFsb246IENyZWF0ZSBXb3Jrc3BhY2UiLCAiY29uZGl0aW9ucyI6IFt7InR5cGUiOiBudWxs
LCAiZXZhbHVhdGlvbl9pZCI6IG51bGwsICJmaWVsZF9uYW1lIjogImluY2lkZW50LnByb3BlcnRp
ZXMuYXZhbG9uX3dvcmtzcGFjZV9pZCIsICJtZXRob2QiOiAibm90X2hhc19hX3ZhbHVlIiwgInZh
bHVlIjogbnVsbH1dLCAiaWQiOiAxOCwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogWyJhdmFsb25f
YWN0aW9ucyJdfSwgeyJsb2dpY190eXBlIjogImFsbCIsICJuYW1lIjogIkF2YWxvbjogUHVsbCBO
b2RlcyIsICJ2aWV3X2l0ZW1zIjogW10sICJ0eXBlIjogMSwgIndvcmtmbG93cyI6IFtdLCAib2Jq
ZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAidGltZW91dF9zZWNvbmRzIjogODY0MDAsICJ1dWlkIjog
ImFmY2Y5MTgzLTg0YTktNGM4YS04YWFjLTg1MTBhZDAyOTcwMCIsICJhdXRvbWF0aW9ucyI6IFtd
LCAiZXhwb3J0X2tleSI6ICJBdmFsb246IFB1bGwgTm9kZXMiLCAiY29uZGl0aW9ucyI6IFt7InR5
cGUiOiBudWxsLCAiZXZhbHVhdGlvbl9pZCI6IG51bGwsICJmaWVsZF9uYW1lIjogImluY2lkZW50
LnByb3BlcnRpZXMuYXZhbG9uX3dvcmtzcGFjZV9pZCIsICJtZXRob2QiOiAiaGFzX2FfdmFsdWUi
LCAidmFsdWUiOiBudWxsfV0sICJpZCI6IDE5LCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbImF2
YWxvbl9hY3Rpb25zIl19LCB7ImxvZ2ljX3R5cGUiOiAiYWxsIiwgIm5hbWUiOiAiQXZhbG9uOiBQ
dXNoIEFydGlmYWN0IiwgInZpZXdfaXRlbXMiOiBbXSwgInR5cGUiOiAxLCAid29ya2Zsb3dzIjog
W10sICJvYmplY3RfdHlwZSI6ICJhcnRpZmFjdCIsICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwg
InV1aWQiOiAiZTkwODc4ZDgtYmM1ZC00OGI2LTgxY2QtNDE0ODQxNWU4YjUzIiwgImF1dG9tYXRp
b25zIjogW10sICJleHBvcnRfa2V5IjogIkF2YWxvbjogUHVzaCBBcnRpZmFjdCIsICJjb25kaXRp
b25zIjogW3sidHlwZSI6IG51bGwsICJldmFsdWF0aW9uX2lkIjogbnVsbCwgImZpZWxkX25hbWUi
OiAiYXJ0aWZhY3QudHlwZSIsICJtZXRob2QiOiAiaW4iLCAidmFsdWUiOiBbIklQIEFkZHJlc3Mi
LCAiRE5TIE5hbWUiLCAiVVJMIiwgIkVtYWlsIFNlbmRlciIsICJNYWx3YXJlIE1ENSBIYXNoIiwg
Ik1hbHdhcmUgU0hBLTEgSGFzaCIsICJNYWx3YXJlIFNIQS0yNTYgSGFzaCJdfSwgeyJ0eXBlIjog
bnVsbCwgImV2YWx1YXRpb25faWQiOiBudWxsLCAiZmllbGRfbmFtZSI6ICJhcnRpZmFjdC5kZXNj
cmlwdGlvbiIsICJtZXRob2QiOiAibm90X2NvbnRhaW5zIiwgInZhbHVlIjogIkF2YWxvbiJ9LCB7
InR5cGUiOiBudWxsLCAiZXZhbHVhdGlvbl9pZCI6IG51bGwsICJmaWVsZF9uYW1lIjogImluY2lk
ZW50LnByb3BlcnRpZXMuYXZhbG9uX3dvcmtzcGFjZV9pZCIsICJtZXRob2QiOiAiaGFzX2FfdmFs
dWUiLCAidmFsdWUiOiBudWxsfV0sICJpZCI6IDE3LCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBb
ImF2YWxvbl9hY3Rpb25zIl19LCB7ImxvZ2ljX3R5cGUiOiAiYWxsIiwgIm5hbWUiOiAiQXZhbG9u
OiBQdXNoIEFydGlmYWN0cyIsICJ2aWV3X2l0ZW1zIjogW10sICJ0eXBlIjogMSwgIndvcmtmbG93
cyI6IFtdLCAib2JqZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAidGltZW91dF9zZWNvbmRzIjogODY0
MDAsICJ1dWlkIjogIjRiNTFiMGM4LTNkMjktNGMxYy05NDEzLTcxMDljOGRkNWM1MiIsICJhdXRv
bWF0aW9ucyI6IFtdLCAiZXhwb3J0X2tleSI6ICJBdmFsb246IFB1c2ggQXJ0aWZhY3RzIiwgImNv
bmRpdGlvbnMiOiBbeyJ0eXBlIjogbnVsbCwgImV2YWx1YXRpb25faWQiOiBudWxsLCAiZmllbGRf
bmFtZSI6ICJpbmNpZGVudC5wcm9wZXJ0aWVzLmF2YWxvbl93b3Jrc3BhY2VfaWQiLCAibWV0aG9k
IjogImhhc19hX3ZhbHVlIiwgInZhbHVlIjogbnVsbH1dLCAiaWQiOiAyMCwgIm1lc3NhZ2VfZGVz
dGluYXRpb25zIjogWyJhdmFsb25fYWN0aW9ucyJdfSwgeyJsb2dpY190eXBlIjogImFsbCIsICJu
YW1lIjogIkF2YWxvbjogU3RhcnQgQXV0by1yZWZyZXNoIiwgInZpZXdfaXRlbXMiOiBbXSwgInR5
cGUiOiAxLCAid29ya2Zsb3dzIjogW10sICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJ0aW1l
b3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiNTI0MjA5YjktYTY5Ni00ODFlLWI5Y2MtZGRk
MDE4YmM0MTk5IiwgImF1dG9tYXRpb25zIjogW3siZmllbGQiOiAiYXZhbG9uX2F1dG9fcmVmcmVz
aCIsICJvcGVyYXRpb24iOiAic2V0X2ZpZWxkIiwgInR5cGUiOiAibW9kaWZ5X2ZpZWxkIiwgInZh
bHVlIjogdHJ1ZSwgInR5cGVfaWQiOiAiaW5jaWRlbnQifV0sICJleHBvcnRfa2V5IjogIkF2YWxv
bjogU3RhcnQgQXV0by1yZWZyZXNoIiwgImNvbmRpdGlvbnMiOiBbeyJ0eXBlIjogbnVsbCwgImV2
YWx1YXRpb25faWQiOiBudWxsLCAiZmllbGRfbmFtZSI6ICJpbmNpZGVudC5wcm9wZXJ0aWVzLmF2
YWxvbl93b3Jrc3BhY2VfaWQiLCAibWV0aG9kIjogImhhc19hX3ZhbHVlIiwgInZhbHVlIjogbnVs
bH0sIHsidHlwZSI6IG51bGwsICJldmFsdWF0aW9uX2lkIjogbnVsbCwgImZpZWxkX25hbWUiOiAi
aW5jaWRlbnQucHJvcGVydGllcy5hdmFsb25fYXV0b19yZWZyZXNoIiwgIm1ldGhvZCI6ICJub3Rf
ZXF1YWxzIiwgInZhbHVlIjogdHJ1ZX1dLCAiaWQiOiAyMSwgIm1lc3NhZ2VfZGVzdGluYXRpb25z
IjogWyJhdmFsb25fYWN0aW9ucyJdfSwgeyJsb2dpY190eXBlIjogImFsbCIsICJuYW1lIjogIkF2
YWxvbjogU3RvcCBBdXRvLXJlZnJlc2giLCAidmlld19pdGVtcyI6IFtdLCAidHlwZSI6IDEsICJ3
b3JrZmxvd3MiOiBbXSwgIm9iamVjdF90eXBlIjogImluY2lkZW50IiwgInRpbWVvdXRfc2Vjb25k
cyI6IDg2NDAwLCAidXVpZCI6ICJjYzZmY2Y5Ny0yY2FiLTRmYzgtOWEyMi1mMjA0MDk1NDRjM2Ei
LCAiYXV0b21hdGlvbnMiOiBbXSwgImV4cG9ydF9rZXkiOiAiQXZhbG9uOiBTdG9wIEF1dG8tcmVm
cmVzaCIsICJjb25kaXRpb25zIjogW3sidHlwZSI6IG51bGwsICJldmFsdWF0aW9uX2lkIjogbnVs
bCwgImZpZWxkX25hbWUiOiAiaW5jaWRlbnQucHJvcGVydGllcy5hdmFsb25fYXV0b19yZWZyZXNo
IiwgIm1ldGhvZCI6ICJlcXVhbHMiLCAidmFsdWUiOiB0cnVlfV0sICJpZCI6IDIyLCAibWVzc2Fn
ZV9kZXN0aW5hdGlvbnMiOiBbImF2YWxvbl9hY3Rpb25zIl19XSwgImxheW91dHMiOiBbXSwgImV4
cG9ydF9mb3JtYXRfdmVyc2lvbiI6IDIsICJpZCI6IDM3LCAiaW5kdXN0cmllcyI6IG51bGwsICJw
aGFzZXMiOiBbXSwgImFjdGlvbl9vcmRlciI6IFtdLCAiZ2VvcyI6IG51bGwsICJzZXJ2ZXJfdmVy
c2lvbiI6IHsibWFqb3IiOiAzMCwgInZlcnNpb24iOiAiMzAuMC4zNDc2IiwgImJ1aWxkX251bWJl
ciI6IDM0NzYsICJtaW5vciI6IDB9LCAidGltZWZyYW1lcyI6IG51bGwsICJ3b3Jrc3BhY2VzIjog
W10sICJhdXRvbWF0aWNfdGFza3MiOiBbXSwgImZ1bmN0aW9ucyI6IFt7ImRpc3BsYXlfbmFtZSI6
ICJhdmFsb25fcmVmcmVzaCIsICJ1dWlkIjogIjRiY2MyZGYxLWM2MGMtNGY2Mi04NzlhLTAyNGNi
MTUwYTE5ZSIsICJjcmVhdG9yIjogeyJkaXNwbGF5X25hbWUiOiAiVmFsIEthbnRjaGV2IiwgInR5
cGUiOiAidXNlciIsICJpZCI6IDEsICJuYW1lIjogInZhbEBraW5nYW5kdW5pb24uY29tIn0sICJ2
aWV3X2l0ZW1zIjogW3sic2hvd19pZiI6IG51bGwsICJmaWVsZF90eXBlIjogIl9fZnVuY3Rpb24i
LCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImNv
bnRlbnQiOiAiZWFmY2I4NjktZmM1Ny00NzFlLWE0MzYtMGIyNmNkNmIwNWYzIiwgInN0ZXBfbGFi
ZWwiOiBudWxsfSwgeyJzaG93X2lmIjogbnVsbCwgImZpZWxkX3R5cGUiOiAiX19mdW5jdGlvbiIs
ICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2UsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiY29u
dGVudCI6ICI3YmZmNzQxOS1lYzEyLTQ0OGUtYjRkMi01YmEzZjc1YWY1MWQiLCAic3RlcF9sYWJl
bCI6IG51bGx9XSwgImV4cG9ydF9rZXkiOiAiYXZhbG9uX3JlZnJlc2giLCAibGFzdF9tb2RpZmll
ZF9ieSI6IHsiZGlzcGxheV9uYW1lIjogIlZhbCBLYW50Y2hldiIsICJ0eXBlIjogInVzZXIiLCAi
aWQiOiAxLCAibmFtZSI6ICJ2YWxAa2luZ2FuZHVuaW9uLmNvbSJ9LCAibmFtZSI6ICJhdmFsb25f
cmVmcmVzaCIsICJ2ZXJzaW9uIjogNSwgIndvcmtmbG93cyI6IFtdLCAibGFzdF9tb2RpZmllZF90
aW1lIjogMTU0NjYzODQxMTM3OCwgImRlc3RpbmF0aW9uX2hhbmRsZSI6ICJhdmFsb25fYWN0aW9u
cyIsICJpZCI6IDIsICJkZXNjcmlwdGlvbiI6IHsiY29udGVudCI6ICJQdWxscyBkYXRhIGZyb20g
YSBsaW5rZWQgQXZhbG9uIHdvcmtzcGFjZS4gUmVxdWlyZXMgYW4gQXZhbG9uIFdvcmtzcGFjZSBh
cnRpZmFjdCB0byBiZSBwcmVzZW50IGluIHRoZSBpbmNpZGVudC4gQXZhbG9uIFdvcmtzcGFjZSBh
cnRpZmFjdCBjYW4gYmUgY3JlYXRlZCB3aXRoIHRoZSBcIkF2YWxvbjogQ3JlYXRlIFdvcmtzcGFj
ZVwiIGN1c3RvbSBtZW51IGNvbW1hbmQuIiwgImZvcm1hdCI6ICJ0ZXh0In19XSwgIm5vdGlmaWNh
dGlvbnMiOiBudWxsLCAicmVndWxhdG9ycyI6IG51bGwsICJpbmNpZGVudF90eXBlcyI6IFt7ImNy
ZWF0ZV9kYXRlIjogMTU1NTM4NzQzNTIyOCwgImRlc2NyaXB0aW9uIjogIkN1c3RvbWl6YXRpb24g
UGFja2FnZXMgKGludGVybmFsKSIsICJleHBvcnRfa2V5IjogIkN1c3RvbWl6YXRpb24gUGFja2Fn
ZXMgKGludGVybmFsKSIsICJpZCI6IDAsICJuYW1lIjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMg
KGludGVybmFsKSIsICJ1cGRhdGVfZGF0ZSI6IDE1NTUzODc0MzUyMjgsICJ1dWlkIjogImJmZWVj
MmQ0LTM3NzAtMTFlOC1hZDM5LTRhMDAwNDA0NGFhMCIsICJlbmFibGVkIjogZmFsc2UsICJzeXN0
ZW0iOiBmYWxzZSwgInBhcmVudF9pZCI6IG51bGwsICJoaWRkZW4iOiBmYWxzZX1dLCAic2NyaXB0
cyI6IFtdLCAidHlwZXMiOiBbXSwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogW3sidXVpZCI6ICJj
MzMyNTBmNC03ODExLTQ1YjUtODU4Yi1kNTk3ZDIyNjljODEiLCAiZXhwb3J0X2tleSI6ICJhdmFs
b25fYWN0aW9ucyIsICJuYW1lIjogImF2YWxvbl9hY3Rpb25zIiwgImRlc3RpbmF0aW9uX3R5cGUi
OiAwLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiYXZhbG9uX2FjdGlvbnMiLCAiZXhwZWN0X2FjayI6
IHRydWUsICJ1c2VycyI6IFsidmFsQGtpbmdhbmR1bmlvbi5jb20iXX1dLCAiaW5jaWRlbnRfYXJ0
aWZhY3RfdHlwZXMiOiBbXSwgInJvbGVzIjogW10sICJmaWVsZHMiOiBbeyJvcGVyYXRpb25zIjog
W10sICJ0eXBlX2lkIjogMCwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJBdmFsb246
IExhc3QgUHVsbCBUaW1lIiwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAicHJlZml4IjogInByb3Bl
cnRpZXMiLCAiY2hhbmdlYWJsZSI6IHRydWUsICJpZCI6IDgyLCAicmVhZF9vbmx5IjogZmFsc2Us
ICJ1dWlkIjogIjU3Y2QyNzJiLWMwMTEtNDg3YS04YjAxLThhNzNiZjIzMGEzMCIsICJjaG9zZW4i
OiBmYWxzZSwgImlucHV0X3R5cGUiOiAiZGF0ZXRpbWVwaWNrZXIiLCAidG9vbHRpcCI6ICJUaW1l
IG9mIHRoZSBsYXN0IHB1bGwgZnJvbSBBdmFsb24iLCAiaW50ZXJuYWwiOiBmYWxzZSwgInJpY2hf
dGV4dCI6IGZhbHNlLCAidGVtcGxhdGVzIjogW10sICJleHBvcnRfa2V5IjogImluY2lkZW50L2F2
YWxvbl9sYXN0X3B1bGxfdGltZSIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicGxhY2Vo
b2xkZXIiOiAiIiwgIm5hbWUiOiAiYXZhbG9uX2xhc3RfcHVsbF90aW1lIiwgImRlZmF1bHRfY2hv
c2VuX2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjogW119LCB7Im9wZXJhdGlvbnMiOiBbXSwg
InR5cGVfaWQiOiAwLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogIkF2YWxvbjogQXV0
byBSZWZyZXNoIFRpbWUiLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJwcmVmaXgiOiAicHJvcGVy
dGllcyIsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogODUsICJyZWFkX29ubHkiOiBmYWxzZSwg
InV1aWQiOiAiODNhZjU3NjItMDgyZS00OWExLWI0OGUtNTIxOGI2YjE2MDA2IiwgImNob3NlbiI6
IGZhbHNlLCAiaW5wdXRfdHlwZSI6ICJudW1iZXIiLCAidG9vbHRpcCI6ICJBdmFsb24gYXV0by1y
ZWZyZXNoIGludGVydmFsIiwgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwg
InRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJpbmNpZGVudC9hdmFsb25fYXV0b19yZWZy
ZXNoX3RpbWUiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgInBsYWNlaG9sZGVyIjogIk1p
bnV0ZXMiLCAibmFtZSI6ICJhdmFsb25fYXV0b19yZWZyZXNoX3RpbWUiLCAiZGVmYXVsdF9jaG9z
ZW5fYnlfc2VydmVyIjogZmFsc2UsICJ2YWx1ZXMiOiBbXX0sIHsib3BlcmF0aW9ucyI6IFtdLCAi
dHlwZV9pZCI6IDAsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAiQXZhbG9uOiBXb3Jr
c3BhY2UgSUQiLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJwcmVmaXgiOiAicHJvcGVydGllcyIs
ICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogODAsICJyZWFkX29ubHkiOiBmYWxzZSwgInV1aWQi
OiAiMzJlNTgxZmEtMmU2ZC00OTU0LThiMGUtZjU2NjNjMWY1OWY0IiwgImNob3NlbiI6IGZhbHNl
LCAiaW5wdXRfdHlwZSI6ICJudW1iZXIiLCAidG9vbHRpcCI6ICJFbnRlciBBdmFsb24gV29ya3Nw
YWNlIElEIHRvIGxpbmsgaXQgdG8gdGhpcyBJbmNpZGVudCAgIiwgImludGVybmFsIjogZmFsc2Us
ICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJpbmNp
ZGVudC9hdmFsb25fd29ya3NwYWNlX2lkIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJw
bGFjZWhvbGRlciI6ICIiLCAibmFtZSI6ICJhdmFsb25fd29ya3NwYWNlX2lkIiwgImRlZmF1bHRf
Y2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjogW119LCB7Im9wZXJhdGlvbnMiOiBb
XSwgInR5cGVfaWQiOiAwLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogIkF2YWxvbjog
QXV0byBSZWZyZXNoIiwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAicHJlZml4IjogInByb3BlcnRp
ZXMiLCAiY2hhbmdlYWJsZSI6IHRydWUsICJpZCI6IDgxLCAicmVhZF9vbmx5IjogZmFsc2UsICJ1
dWlkIjogIjA2YTJhYjhmLTdkNjktNDk2Yi1iMWZhLTBmNjc5YTU2MzNhNiIsICJjaG9zZW4iOiBm
YWxzZSwgImlucHV0X3R5cGUiOiAiYm9vbGVhbiIsICJ0b29sdGlwIjogIlNldCB0byBZZXMgdG8g
YXV0b21hdGljYWxseSBwdWxsIG5vZGVzIGZyb20gQXZhbG9uIiwgImludGVybmFsIjogZmFsc2Us
ICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJpbmNp
ZGVudC9hdmFsb25fYXV0b19yZWZyZXNoIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJw
bGFjZWhvbGRlciI6ICIiLCAibmFtZSI6ICJhdmFsb25fYXV0b19yZWZyZXNoIiwgImRlZmF1bHRf
Y2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjogW119LCB7Im9wZXJhdGlvbnMiOiBb
XSwgInR5cGVfaWQiOiAxMSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJpbmNpZGVu
dF9pZCIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxl
IjogdHJ1ZSwgImlkIjogODMsICJyZWFkX29ubHkiOiBmYWxzZSwgInV1aWQiOiAiZWFmY2I4Njkt
ZmM1Ny00NzFlLWE0MzYtMGIyNmNkNmIwNWYzIiwgImNob3NlbiI6IGZhbHNlLCAiaW5wdXRfdHlw
ZSI6ICJudW1iZXIiLCAidG9vbHRpcCI6ICJJbmNpZGVudCBJRCIsICJpbnRlcm5hbCI6IGZhbHNl
LCAicmljaF90ZXh0IjogZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAiX19m
dW5jdGlvbi9pbmNpZGVudF9pZCIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicGxhY2Vo
b2xkZXIiOiAiIiwgIm5hbWUiOiAiaW5jaWRlbnRfaWQiLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2Vy
dmVyIjogZmFsc2UsICJyZXF1aXJlZCI6ICJhbHdheXMiLCAidmFsdWVzIjogW119LCB7Im9wZXJh
dGlvbnMiOiBbXSwgInR5cGVfaWQiOiAxMSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6
ICJpbmNpZGVudF9uYW1lIiwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAicHJlZml4IjogbnVsbCwg
ImNoYW5nZWFibGUiOiB0cnVlLCAiaWQiOiA4NCwgInJlYWRfb25seSI6IGZhbHNlLCAidXVpZCI6
ICI3YmZmNzQxOS1lYzEyLTQ0OGUtYjRkMi01YmEzZjc1YWY1MWQiLCAiY2hvc2VuIjogZmFsc2Us
ICJpbnB1dF90eXBlIjogInRleHQiLCAidG9vbHRpcCI6ICJJbmNpZGVudCBOYW1lIiwgImludGVy
bmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0
X2tleSI6ICJfX2Z1bmN0aW9uL2luY2lkZW50X25hbWUiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBm
YWxzZSwgInBsYWNlaG9sZGVyIjogIiIsICJuYW1lIjogImluY2lkZW50X25hbWUiLCAiZGVmYXVs
dF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJ2YWx1ZXMiOiBbXX1dLCAib3ZlcnJpZGVzIjog
W10sICJleHBvcnRfZGF0ZSI6IDE1NTUzODc0MDM4NzZ9
"""
    )