# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for avalon"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the avalon package"""
    reload_params = {"package": u"avalon",
                    "incident_fields": [u"avalon_pull_nodes_automatically", u"avalon_workspace_id"], 
                    "action_fields": [], 
                    "functions_params": [], 
                    "datatables": [], 
                    "message_destinations": [u"avalon_actions", u"avalon_black_hole"], 
                    "functions": [u"avalon_refresh"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"avalon_refresh"], 
                    "actions": [u"Avalon: Create Workspace", u"Avalon: Pull Nodes", u"Avalon: Pull Nodes Every 60 min", u"Avalon: Push Artifact", u"Avalon: Push Artifacts"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Incident fields:
    #     avalon_pull_nodes_automatically
    #     avalon_workspace_id
    #   Message Destinations:
    #     avalon_actions
    #   Functions:
    #     avalon_refresh
    #   Workflows:
    #     avalon_refresh
    #   Rules:
    #     Avalon: Create Workspace
    #     Avalon: Pull Nodes
    #     Avalon: Pull Nodes Every 60 min
    #     Avalon: Push Artifact
    #     Avalon: Push Artifacts


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJwcm9ncmFtbWF0aWNfbmFtZSI6ICJh
dmFsb25fcmVmcmVzaCIsICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJleHBvcnRfa2V5Ijog
ImF2YWxvbl9yZWZyZXNoIiwgInV1aWQiOiAiZDM4YzY3MWYtZmMzOS00NzQxLWIwMTctNzM0ZjAx
YmUxNjdjIiwgImxhc3RfbW9kaWZpZWRfYnkiOiAidmFsQGtpbmdhbmR1bmlvbi5jb20iLCAibmFt
ZSI6ICJBdmFsb246IFJlZnJlc2giLCAiY29udGVudCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249
XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93
d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDov
L3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRw
Oi8vcmVzaWxpZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3Jn
LzIwMDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxT
Y2hlbWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3Jn
L3Rlc3RcIj48cHJvY2VzcyBpZD1cImF2YWxvbl9yZWZyZXNoXCIgaXNFeGVjdXRhYmxlPVwidHJ1
ZVwiIG5hbWU9XCJBdmFsb246IFJlZnJlc2hcIj48ZG9jdW1lbnRhdGlvbj48IVtDREFUQVtQdWxs
cyBkYXRhIGZyb20gbGlua2VkIEF2YWxvbiB3b3Jrc3BhY2UuIFJlcXVpcmVzIGFuIEF2YWxvbiBX
b3Jrc3BhY2UgdG8gYmUgbGlua2VkIHRvIGFuIGluY2lkZW50LiBZb3UgY2FuIGNyZWF0ZSBhbmQg
bGluayBhbiBBdmFsb24gd29ya3NwYWNlIGFydGlmYWN0IGJ5IGV4ZWN1dGluZyB0aGUgXCJBdmFs
b246IENyZWF0ZSBXb3Jrc3BhY2VcIiBjdXN0b20gbWVudSBjb21tYW5kLl1dPjwvZG9jdW1lbnRh
dGlvbj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiPjxvdXRnb2luZz5TZXF1
ZW5jZUZsb3dfMHlyZTI0ZTwvb3V0Z29pbmc+PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1c
IlNlcnZpY2VUYXNrXzB1YnoyZ2pcIiBuYW1lPVwiQXZhbG9uOiBSZWZyZXNoXCIgcmVzaWxpZW50
OnR5cGU9XCJmdW5jdGlvblwiPjxleHRlbnNpb25FbGVtZW50cz48cmVzaWxpZW50OmZ1bmN0aW9u
IHV1aWQ9XCI0YmNjMmRmMS1jNjBjLTRmNjItODc5YS0wMjRjYjE1MGExOWVcIj57XCJpbnB1dHNc
Ijp7fX08L3Jlc2lsaWVudDpmdW5jdGlvbj48L2V4dGVuc2lvbkVsZW1lbnRzPjxpbmNvbWluZz5T
ZXF1ZW5jZUZsb3dfMHlyZTI0ZTwvaW5jb21pbmc+PC9zZXJ2aWNlVGFzaz48c2VxdWVuY2VGbG93
IGlkPVwiU2VxdWVuY2VGbG93XzB5cmUyNGVcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFz
eG1cIiB0YXJnZXRSZWY9XCJTZXJ2aWNlVGFza18wdWJ6MmdqXCIvPjxib3VuZGFyeUV2ZW50IGF0
dGFjaGVkVG9SZWY9XCJTZXJ2aWNlVGFza18wdWJ6MmdqXCIgY2FuY2VsQWN0aXZpdHk9XCJmYWxz
ZVwiIGlkPVwiQm91bmRhcnlFdmVudF8xY2w3NzhuXCIgbmFtZT1cIlwiPjx0aW1lckV2ZW50RGVm
aW5pdGlvbj48dGltZUN5Y2xlIHhzaTp0eXBlPVwidEZvcm1hbEV4cHJlc3Npb25cIj5SL1BUNjBN
PC90aW1lQ3ljbGU+PC90aW1lckV2ZW50RGVmaW5pdGlvbj48L2JvdW5kYXJ5RXZlbnQ+PHRleHRB
bm5vdGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiPjx0ZXh0PlN0YXJ0IHlvdXIg
d29ya2Zsb3cgaGVyZTwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFz
c29jaWF0aW9uXzFzZXVqNDhcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiB0YXJn
ZXRSZWY9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIvPjwvcHJvY2Vzcz48YnBtbmRpOkJQTU5E
aWFncmFtIGlkPVwiQlBNTkRpYWdyYW1fMVwiPjxicG1uZGk6QlBNTlBsYW5lIGJwbW5FbGVtZW50
PVwidW5kZWZpbmVkXCIgaWQ9XCJCUE1OUGxhbmVfMVwiPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5F
bGVtZW50PVwiU3RhcnRFdmVudF8xNTVhc3htXCIgaWQ9XCJTdGFydEV2ZW50XzE1NWFzeG1fZGlc
Ij48b21nZGM6Qm91bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9XCIxNjJcIiB5PVwi
MTg4XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMFwiIHdpZHRo
PVwiOTBcIiB4PVwiMTU3XCIgeT1cIjIyM1wiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6
QlBNTlNoYXBlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4dEFubm90YXRpb25f
MWt4eGl5dFwiIGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dF9kaVwiPjxvbWdkYzpCb3VuZHMg
aGVpZ2h0PVwiMzBcIiB3aWR0aD1cIjEwMFwiIHg9XCI5OVwiIHk9XCIyNTRcIi8+PC9icG1uZGk6
QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3NvY2lhdGlvbl8xc2V1
ajQ4XCIgaWQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4X2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCIx
NjlcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIyMFwiLz48b21nZGk6d2F5cG9pbnQg
eD1cIjE1M1wiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQ
TU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU2VydmljZVRhc2tfMHViejJn
alwiIGlkPVwiU2VydmljZVRhc2tfMHViejJnal9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwi
ODBcIiB3aWR0aD1cIjEwMFwiIHg9XCIyMjdcIiB5PVwiMTY2XCIvPjwvYnBtbmRpOkJQTU5TaGFw
ZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiU2VxdWVuY2VGbG93XzB5cmUyNGVcIiBp
ZD1cIlNlcXVlbmNlRmxvd18weXJlMjRlX2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCIxOThcIiB4
c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjIy
N1wiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxicG1uZGk6QlBNTkxhYmVs
PjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1cIjkwXCIgeD1cIjE2Ny41XCIgeT1c
IjE4NC41XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQ
TU5TaGFwZSBicG1uRWxlbWVudD1cIkJvdW5kYXJ5RXZlbnRfMWNsNzc4blwiIGlkPVwiQm91bmRh
cnlFdmVudF8wNXJ6OWdwX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwi
MzZcIiB4PVwiMjU5XCIgeT1cIjE0OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRz
IGhlaWdodD1cIjI1XCIgd2lkdGg9XCI4OFwiIHg9XCIyMzNcIiB5PVwiMTg3XCIvPjwvYnBtbmRp
OkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PC9icG1uZGk6QlBNTlBsYW5lPjwvYnBtbmRp
OkJQTU5EaWFncmFtPjwvZGVmaW5pdGlvbnM+IiwgIndvcmtmbG93X2lkIjogImF2YWxvbl9yZWZy
ZXNoIiwgInZlcnNpb24iOiA0fSwgIndvcmtmbG93X2lkIjogNCwgImFjdGlvbnMiOiBbXSwgImxh
c3RfbW9kaWZpZWRfdGltZSI6IDE1NDY1NTc5MTI1ODAsICJjcmVhdG9yX2lkIjogInZhbEBraW5n
YW5kdW5pb24uY29tIiwgImRlc2NyaXB0aW9uIjogIlB1bGxzIGRhdGEgZnJvbSBsaW5rZWQgQXZh
bG9uIHdvcmtzcGFjZS4gUmVxdWlyZXMgYW4gQXZhbG9uIFdvcmtzcGFjZSB0byBiZSBsaW5rZWQg
dG8gYW4gaW5jaWRlbnQuIFlvdSBjYW4gY3JlYXRlIGFuZCBsaW5rIGFuIEF2YWxvbiB3b3Jrc3Bh
Y2UgYXJ0aWZhY3QgYnkgZXhlY3V0aW5nIHRoZSBcIkF2YWxvbjogQ3JlYXRlIFdvcmtzcGFjZVwi
IGN1c3RvbSBtZW51IGNvbW1hbmQuIn1dLCAiYWN0aW9ucyI6IFt7ImxvZ2ljX3R5cGUiOiAiYWxs
IiwgIm5hbWUiOiAiQXZhbG9uOiBDcmVhdGUgV29ya3NwYWNlIiwgInZpZXdfaXRlbXMiOiBbXSwg
InR5cGUiOiAxLCAid29ya2Zsb3dzIjogW10sICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJ0
aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiMjYxZjZhZDItYmE2OC00Y2QxLWFkMjMt
NmI1ZmI5Y2NjNjliIiwgImF1dG9tYXRpb25zIjogW10sICJleHBvcnRfa2V5IjogIkF2YWxvbjog
Q3JlYXRlIFdvcmtzcGFjZSIsICJjb25kaXRpb25zIjogW3sidHlwZSI6IG51bGwsICJldmFsdWF0
aW9uX2lkIjogbnVsbCwgImZpZWxkX25hbWUiOiAiaW5jaWRlbnQucHJvcGVydGllcy5hdmFsb25f
d29ya3NwYWNlX2lkIiwgIm1ldGhvZCI6ICJub3RfaGFzX2FfdmFsdWUiLCAidmFsdWUiOiBudWxs
fV0sICJpZCI6IDE4LCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbImF2YWxvbl9hY3Rpb25zIl19
LCB7ImxvZ2ljX3R5cGUiOiAiYWxsIiwgIm5hbWUiOiAiQXZhbG9uOiBQdWxsIE5vZGVzIiwgInZp
ZXdfaXRlbXMiOiBbXSwgInR5cGUiOiAxLCAid29ya2Zsb3dzIjogW10sICJvYmplY3RfdHlwZSI6
ICJpbmNpZGVudCIsICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiYWZjZjkxODMt
ODRhOS00YzhhLThhYWMtODUxMGFkMDI5NzAwIiwgImF1dG9tYXRpb25zIjogW10sICJleHBvcnRf
a2V5IjogIkF2YWxvbjogUHVsbCBOb2RlcyIsICJjb25kaXRpb25zIjogW3sidHlwZSI6IG51bGws
ICJldmFsdWF0aW9uX2lkIjogbnVsbCwgImZpZWxkX25hbWUiOiAiaW5jaWRlbnQucHJvcGVydGll
cy5hdmFsb25fd29ya3NwYWNlX2lkIiwgIm1ldGhvZCI6ICJoYXNfYV92YWx1ZSIsICJ2YWx1ZSI6
IG51bGx9XSwgImlkIjogMTksICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFsiYXZhbG9uX2FjdGlv
bnMiXX0sIHsibG9naWNfdHlwZSI6ICJhbGwiLCAibmFtZSI6ICJBdmFsb246IFB1bGwgTm9kZXMg
RXZlcnkgNjAgbWluIiwgInZpZXdfaXRlbXMiOiBbXSwgInR5cGUiOiAxLCAid29ya2Zsb3dzIjog
WyJhdmFsb25fcmVmcmVzaCJdLCAib2JqZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAidGltZW91dF9z
ZWNvbmRzIjogODY0MDAsICJ1dWlkIjogIjUyNDIwOWI5LWE2OTYtNDgxZS1iOWNjLWRkZDAxOGJj
NDE5OSIsICJhdXRvbWF0aW9ucyI6IFt7ImZpZWxkIjogImF2YWxvbl9wdWxsX25vZGVzX2F1dG9t
YXRpY2FsbHkiLCAib3BlcmF0aW9uIjogInNldF9maWVsZCIsICJ0eXBlIjogIm1vZGlmeV9maWVs
ZCIsICJ2YWx1ZSI6IHRydWUsICJ0eXBlX2lkIjogImluY2lkZW50In1dLCAiZXhwb3J0X2tleSI6
ICJBdmFsb246IFB1bGwgTm9kZXMgRXZlcnkgNjAgbWluIiwgImNvbmRpdGlvbnMiOiBbeyJ0eXBl
IjogbnVsbCwgImV2YWx1YXRpb25faWQiOiBudWxsLCAiZmllbGRfbmFtZSI6ICJpbmNpZGVudC5w
cm9wZXJ0aWVzLmF2YWxvbl9wdWxsX25vZGVzX2F1dG9tYXRpY2FsbHkiLCAibWV0aG9kIjogIm5v
dF9lcXVhbHMiLCAidmFsdWUiOiB0cnVlfV0sICJpZCI6IDIxLCAibWVzc2FnZV9kZXN0aW5hdGlv
bnMiOiBbXX0sIHsibG9naWNfdHlwZSI6ICJhZHZhbmNlZCIsICJuYW1lIjogIkF2YWxvbjogUHVz
aCBBcnRpZmFjdCIsICJ2aWV3X2l0ZW1zIjogW10sICJ0eXBlIjogMSwgIndvcmtmbG93cyI6IFtd
LCAib2JqZWN0X3R5cGUiOiAiYXJ0aWZhY3QiLCAidGltZW91dF9zZWNvbmRzIjogODY0MDAsICJ1
dWlkIjogImU5MDg3OGQ4LWJjNWQtNDhiNi04MWNkLTQxNDg0MTVlOGI1MyIsICJjdXN0b21fY29u
ZGl0aW9uIjogIjQgQU5EICgxIE9SIDIpIEFORCAzIiwgImF1dG9tYXRpb25zIjogW10sICJleHBv
cnRfa2V5IjogIkF2YWxvbjogUHVzaCBBcnRpZmFjdCIsICJjb25kaXRpb25zIjogW3sidHlwZSI6
IG51bGwsICJldmFsdWF0aW9uX2lkIjogMiwgImZpZWxkX25hbWUiOiAiYXJ0aWZhY3QudHlwZSIs
ICJtZXRob2QiOiAiZXF1YWxzIiwgInZhbHVlIjogIklQIEFkZHJlc3MifSwgeyJ0eXBlIjogbnVs
bCwgImV2YWx1YXRpb25faWQiOiAzLCAiZmllbGRfbmFtZSI6ICJhcnRpZmFjdC5kZXNjcmlwdGlv
biIsICJtZXRob2QiOiAibm90X2NvbnRhaW5zIiwgInZhbHVlIjogIkF2YWxvbiJ9LCB7InR5cGUi
OiBudWxsLCAiZXZhbHVhdGlvbl9pZCI6IDQsICJmaWVsZF9uYW1lIjogImluY2lkZW50LnByb3Bl
cnRpZXMuYXZhbG9uX3dvcmtzcGFjZV9pZCIsICJtZXRob2QiOiAiaGFzX2FfdmFsdWUiLCAidmFs
dWUiOiBudWxsfSwgeyJ0eXBlIjogbnVsbCwgImV2YWx1YXRpb25faWQiOiAxLCAiZmllbGRfbmFt
ZSI6ICJhcnRpZmFjdC50eXBlIiwgIm1ldGhvZCI6ICJlcXVhbHMiLCAidmFsdWUiOiAiRE5TIE5h
bWUifV0sICJpZCI6IDE3LCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbImF2YWxvbl9hY3Rpb25z
Il19LCB7ImxvZ2ljX3R5cGUiOiAiYWxsIiwgIm5hbWUiOiAiQXZhbG9uOiBQdXNoIEFydGlmYWN0
cyIsICJ2aWV3X2l0ZW1zIjogW10sICJ0eXBlIjogMSwgIndvcmtmbG93cyI6IFtdLCAib2JqZWN0
X3R5cGUiOiAiaW5jaWRlbnQiLCAidGltZW91dF9zZWNvbmRzIjogODY0MDAsICJ1dWlkIjogIjRi
NTFiMGM4LTNkMjktNGMxYy05NDEzLTcxMDljOGRkNWM1MiIsICJhdXRvbWF0aW9ucyI6IFtdLCAi
ZXhwb3J0X2tleSI6ICJBdmFsb246IFB1c2ggQXJ0aWZhY3RzIiwgImNvbmRpdGlvbnMiOiBbeyJ0
eXBlIjogbnVsbCwgImV2YWx1YXRpb25faWQiOiBudWxsLCAiZmllbGRfbmFtZSI6ICJpbmNpZGVu
dC5wcm9wZXJ0aWVzLmF2YWxvbl93b3Jrc3BhY2VfaWQiLCAibWV0aG9kIjogImhhc19hX3ZhbHVl
IiwgInZhbHVlIjogbnVsbH1dLCAiaWQiOiAyMCwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogWyJh
dmFsb25fYWN0aW9ucyJdfV0sICJsYXlvdXRzIjogW10sICJleHBvcnRfZm9ybWF0X3ZlcnNpb24i
OiAyLCAiaWQiOiAyNSwgImluZHVzdHJpZXMiOiBudWxsLCAicGhhc2VzIjogW10sICJhY3Rpb25f
b3JkZXIiOiBbXSwgImdlb3MiOiBudWxsLCAic2VydmVyX3ZlcnNpb24iOiB7Im1ham9yIjogMzAs
ICJ2ZXJzaW9uIjogIjMwLjAuMzQ3NiIsICJidWlsZF9udW1iZXIiOiAzNDc2LCAibWlub3IiOiAw
fSwgInRpbWVmcmFtZXMiOiBudWxsLCAid29ya3NwYWNlcyI6IFtdLCAiYXV0b21hdGljX3Rhc2tz
IjogW10sICJmdW5jdGlvbnMiOiBbeyJkaXNwbGF5X25hbWUiOiAiQXZhbG9uOiBSZWZyZXNoIiwg
InV1aWQiOiAiNGJjYzJkZjEtYzYwYy00ZjYyLTg3OWEtMDI0Y2IxNTBhMTllIiwgImNyZWF0b3Ii
OiB7ImRpc3BsYXlfbmFtZSI6ICJWYWwgS2FudGNoZXYiLCAidHlwZSI6ICJ1c2VyIiwgImlkIjog
MSwgIm5hbWUiOiAidmFsQGtpbmdhbmR1bmlvbi5jb20ifSwgInZpZXdfaXRlbXMiOiBbXSwgImV4
cG9ydF9rZXkiOiAiYXZhbG9uX3JlZnJlc2giLCAibGFzdF9tb2RpZmllZF9ieSI6IHsiZGlzcGxh
eV9uYW1lIjogIlZhbCBLYW50Y2hldiIsICJ0eXBlIjogInVzZXIiLCAiaWQiOiAxLCAibmFtZSI6
ICJ2YWxAa2luZ2FuZHVuaW9uLmNvbSJ9LCAibmFtZSI6ICJhdmFsb25fcmVmcmVzaCIsICJ2ZXJz
aW9uIjogMiwgIndvcmtmbG93cyI6IFt7InByb2dyYW1tYXRpY19uYW1lIjogImF2YWxvbl9yZWZy
ZXNoIiwgIm9iamVjdF90eXBlIjogImluY2lkZW50IiwgInV1aWQiOiBudWxsLCAiYWN0aW9ucyI6
IFtdLCAibmFtZSI6ICJBdmFsb246IFJlZnJlc2giLCAid29ya2Zsb3dfaWQiOiA0LCAiZGVzY3Jp
cHRpb24iOiBudWxsfV0sICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNTQ2NDYwNTkxNTc4LCAiZGVz
dGluYXRpb25faGFuZGxlIjogImF2YWxvbl9hY3Rpb25zIiwgImlkIjogMiwgImRlc2NyaXB0aW9u
IjogeyJjb250ZW50IjogIlB1bGxzIGRhdGEgZnJvbSBhIGxpbmtlZCBBdmFsb24gd29ya3NwYWNl
LiBSZXF1aXJlcyBhbiBBdmFsb24gV29ya3NwYWNlIGFydGlmYWN0IHRvIGJlIHByZXNlbnQgaW4g
dGhlIGluY2lkZW50LiBBdmFsb24gV29ya3NwYWNlIGFydGlmYWN0IGNhbiBiZSBjcmVhdGVkIHdp
dGggdGhlIFwiQXZhbG9uOiBDcmVhdGUgV29ya3NwYWNlXCIgY3VzdG9tIG1lbnUgY29tbWFuZC4i
LCAiZm9ybWF0IjogInRleHQifX1dLCAibm90aWZpY2F0aW9ucyI6IG51bGwsICJyZWd1bGF0b3Jz
IjogbnVsbCwgImluY2lkZW50X3R5cGVzIjogW3siY3JlYXRlX2RhdGUiOiAxNTQ2NTU5NjU5NDEy
LCAiZGVzY3JpcHRpb24iOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImV4
cG9ydF9rZXkiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImlkIjogMCwg
Im5hbWUiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgInVwZGF0ZV9kYXRl
IjogMTU0NjU1OTY1OTQxMiwgInV1aWQiOiAiYmZlZWMyZDQtMzc3MC0xMWU4LWFkMzktNGEwMDA0
MDQ0YWEwIiwgImVuYWJsZWQiOiBmYWxzZSwgInN5c3RlbSI6IGZhbHNlLCAicGFyZW50X2lkIjog
bnVsbCwgImhpZGRlbiI6IGZhbHNlfV0sICJzY3JpcHRzIjogW10sICJ0eXBlcyI6IFtdLCAibWVz
c2FnZV9kZXN0aW5hdGlvbnMiOiBbeyJ1dWlkIjogImMzMzI1MGY0LTc4MTEtNDViNS04NThiLWQ1
OTdkMjI2OWM4MSIsICJleHBvcnRfa2V5IjogImF2YWxvbl9hY3Rpb25zIiwgIm5hbWUiOiAiYXZh
bG9uX2FjdGlvbnMiLCAiZGVzdGluYXRpb25fdHlwZSI6IDAsICJwcm9ncmFtbWF0aWNfbmFtZSI6
ICJhdmFsb25fYWN0aW9ucyIsICJleHBlY3RfYWNrIjogdHJ1ZSwgInVzZXJzIjogWyJ2YWxAa2lu
Z2FuZHVuaW9uLmNvbSJdfV0sICJpbmNpZGVudF9hcnRpZmFjdF90eXBlcyI6IFtdLCAicm9sZXMi
OiBbXSwgImZpZWxkcyI6IFt7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQiOiAwLCAib3BlcmF0
aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogIkF2YWxvbjogV29ya3NwYWNlIElEIiwgImJsYW5rX29w
dGlvbiI6IGZhbHNlLCAicHJlZml4IjogInByb3BlcnRpZXMiLCAiY2hhbmdlYWJsZSI6IHRydWUs
ICJpZCI6IDgwLCAicmVhZF9vbmx5IjogZmFsc2UsICJ1dWlkIjogIjMyZTU4MWZhLTJlNmQtNDk1
NC04YjBlLWY1NjYzYzFmNTlmNCIsICJjaG9zZW4iOiBmYWxzZSwgImlucHV0X3R5cGUiOiAibnVt
YmVyIiwgInRvb2x0aXAiOiAiRW50ZXIgQXZhbG9uIFdvcmtzcGFjZSBJRCB0byBsaW5rIGl0IHRv
IHRoaXMgSW5jaWRlbnQgICIsICJpbnRlcm5hbCI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2Us
ICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAiaW5jaWRlbnQvYXZhbG9uX3dvcmtzcGFj
ZV9pZCIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicGxhY2Vob2xkZXIiOiAiIiwgIm5h
bWUiOiAiYXZhbG9uX3dvcmtzcGFjZV9pZCIsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBm
YWxzZSwgInZhbHVlcyI6IFtdfSwgeyJvcGVyYXRpb25zIjogW10sICJ0eXBlX2lkIjogMCwgIm9w
ZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJBdmFsb246IFB1bGwgTm9kZXMgQXV0b21hdGlj
YWxseSIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6ICJwcm9wZXJ0aWVzIiwgImNo
YW5nZWFibGUiOiB0cnVlLCAiaWQiOiA4MSwgInJlYWRfb25seSI6IGZhbHNlLCAidXVpZCI6ICIw
NmEyYWI4Zi03ZDY5LTQ5NmItYjFmYS0wZjY3OWE1NjMzYTYiLCAiY2hvc2VuIjogZmFsc2UsICJp
bnB1dF90eXBlIjogImJvb2xlYW4iLCAidG9vbHRpcCI6ICJTZXQgdG8gWWVzIHRvIGF1dG9tYXRp
Y2FsbHkgcHVsbCBub2RlcyBmcm9tIEF2YWxvbiBldmVyeSA2MCBtaW51dGVzIiwgImludGVybmFs
IjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tl
eSI6ICJpbmNpZGVudC9hdmFsb25fcHVsbF9ub2Rlc19hdXRvbWF0aWNhbGx5IiwgImhpZGVfbm90
aWZpY2F0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRlciI6ICIiLCAibmFtZSI6ICJhdmFsb25fcHVs
bF9ub2Rlc19hdXRvbWF0aWNhbGx5IiwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNl
LCAidmFsdWVzIjogW119XSwgIm92ZXJyaWRlcyI6IFtdLCAiZXhwb3J0X2RhdGUiOiAxNTQ2NTU5
NjU3MzY3fQ==
"""
    )