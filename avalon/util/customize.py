# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for avalon"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the avalon package"""
    reload_params = {"package": u"avalon",
                    "incident_fields": [u"avalon_auto_refresh", u"avalon_last_pull_time", u"avalon_workspace_id"], 
                    "action_fields": [], 
                    "function_params": [u"incident_id", u"incident_name"], 
                    "datatables": [], 
                    "message_destinations": [u"avalon_actions"], 
                    "functions": [u"avalon_refresh"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"avalon_refresh"], 
                    "actions": [u"Avalon: Create Workspace", u"Avalon: Pull Nodes", u"Avalon: Push Artifact", u"Avalon: Push Artifacts", u"Avalon: Start Auto-refresh Workflow", u"Avalon: Stop Auto-refresh Workflow"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Incident fields:
    #     avalon_auto_refresh
    #     avalon_last_pull_time
    #     avalon_workspace_id
    #   Function inputs:
    #     incident_id
    #     incident_name
    #   Message Destinations:
    #     avalon_actions
    #   Functions:
    #     avalon_refresh
    #   Workflows:
    #     avalon_refresh
    #   Rules:
    #     Avalon: Create Workspace
    #     Avalon: Pull Nodes
    #     Avalon: Push Artifact
    #     Avalon: Push Artifacts
    #     Avalon: Start Auto-refresh Workflow
    #     Avalon: Stop Auto-refresh Workflow


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJwcm9ncmFtbWF0aWNfbmFtZSI6ICJh
dmFsb25fcmVmcmVzaCIsICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJleHBvcnRfa2V5Ijog
ImF2YWxvbl9yZWZyZXNoIiwgInV1aWQiOiAiZDM4YzY3MWYtZmMzOS00NzQxLWIwMTctNzM0ZjAx
YmUxNjdjIiwgImxhc3RfbW9kaWZpZWRfYnkiOiAidmFsQGtpbmdhbmR1bmlvbi5jb20iLCAibmFt
ZSI6ICJBdmFsb246IFJlZnJlc2giLCAiY29udGVudCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249
XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93
d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRw
Oi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDov
L3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRw
Oi8vcmVzaWxpZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3Jn
LzIwMDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxT
Y2hlbWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3Jn
L3Rlc3RcIj48cHJvY2VzcyBpZD1cImF2YWxvbl9yZWZyZXNoXCIgaXNFeGVjdXRhYmxlPVwidHJ1
ZVwiIG5hbWU9XCJBdmFsb246IFJlZnJlc2hcIj48ZG9jdW1lbnRhdGlvbj48IVtDREFUQVtQdWxs
cyBkYXRhIGZyb20gbGlua2VkIEF2YWxvbiB3b3Jrc3BhY2UuIFJlcXVpcmVzIGFuIEF2YWxvbiBX
b3Jrc3BhY2UgdG8gYmUgbGlua2VkIHRvIGFuIGluY2lkZW50LiBZb3UgY2FuIGNyZWF0ZSBhbmQg
bGluayBhbiBBdmFsb24gd29ya3NwYWNlIGFydGlmYWN0IGJ5IGV4ZWN1dGluZyB0aGUgXCJBdmFs
b246IENyZWF0ZSBXb3Jrc3BhY2VcIiBjdXN0b20gbWVudSBjb21tYW5kLl1dPjwvZG9jdW1lbnRh
dGlvbj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0RXZlbnRfMXl0azg5Z1wiPjxvdXRnb2luZz5TZXF1
ZW5jZUZsb3dfMGljbnZkejwvb3V0Z29pbmc+PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1c
IlNlcnZpY2VUYXNrXzEzeXM4YzVcIiBuYW1lPVwiYXZhbG9uX3JlZnJlc2hcIiByZXNpbGllbnQ6
dHlwZT1cImZ1bmN0aW9uXCI+PGV4dGVuc2lvbkVsZW1lbnRzPjxyZXNpbGllbnQ6ZnVuY3Rpb24g
dXVpZD1cIjRiY2MyZGYxLWM2MGMtNGY2Mi04NzlhLTAyNGNiMTUwYTE5ZVwiPntcImlucHV0c1wi
Ont9LFwicHJlX3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCJpbnB1dHMuaW5jaWRlbnRfaWQgPSBpbmNp
ZGVudC5pZFxcbmlucHV0cy5pbmNpZGVudF9uYW1lID0gaW5jaWRlbnQubmFtZVwiLFwicmVzdWx0
X25hbWVcIjpcIlwifTwvcmVzaWxpZW50OmZ1bmN0aW9uPjwvZXh0ZW5zaW9uRWxlbWVudHM+PGlu
Y29taW5nPlNlcXVlbmNlRmxvd18xa2FqdWx6PC9pbmNvbWluZz48b3V0Z29pbmc+U2VxdWVuY2VG
bG93XzBxOWlieG08L291dGdvaW5nPjwvc2VydmljZVRhc2s+PGluY2x1c2l2ZUdhdGV3YXkgaWQ9
XCJJbmNsdXNpdmVHYXRld2F5XzFyd3I4dWpcIj48aW5jb21pbmc+U2VxdWVuY2VGbG93XzBpY252
ZHo8L2luY29taW5nPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMHE5aWJ4bTwvaW5jb21pbmc+PG91
dGdvaW5nPlNlcXVlbmNlRmxvd18xa2FqdWx6PC9vdXRnb2luZz48L2luY2x1c2l2ZUdhdGV3YXk+
PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18waWNudmR6XCIgc291cmNlUmVmPVwiU3Rh
cnRFdmVudF8xeXRrODlnXCIgdGFyZ2V0UmVmPVwiSW5jbHVzaXZlR2F0ZXdheV8xcndyOHVqXCIv
PjxzZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMHE5aWJ4bVwiIHNvdXJjZVJlZj1cIlNl
cnZpY2VUYXNrXzEzeXM4YzVcIiB0YXJnZXRSZWY9XCJJbmNsdXNpdmVHYXRld2F5XzFyd3I4dWpc
Ii8+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18xa2FqdWx6XCIgc291cmNlUmVmPVwi
SW5jbHVzaXZlR2F0ZXdheV8xcndyOHVqXCIgdGFyZ2V0UmVmPVwiU2VydmljZVRhc2tfMTN5czhj
NVwiLz48L3Byb2Nlc3M+PGJwbW5kaTpCUE1ORGlhZ3JhbSBpZD1cIkJQTU5EaWFncmFtXzFcIj48
YnBtbmRpOkJQTU5QbGFuZSBicG1uRWxlbWVudD1cInVuZGVmaW5lZFwiIGlkPVwiQlBNTlBsYW5l
XzFcIj48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlN0YXJ0RXZlbnRfMXl0azg5Z1wi
IGlkPVwiU3RhcnRFdmVudF8xeXRrODlnX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwi
IHdpZHRoPVwiMzZcIiB4PVwiMTE4XCIgeT1cIjIwM1wiLz48YnBtbmRpOkJQTU5MYWJlbD48b21n
ZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCI5MFwiIHg9XCI5MVwiIHk9XCIyNDJcIi8+
PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5TaGFwZSBi
cG1uRWxlbWVudD1cIlNlcnZpY2VUYXNrXzEzeXM4YzVcIiBpZD1cIlNlcnZpY2VUYXNrXzEzeXM4
YzVfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjgwXCIgd2lkdGg9XCIxMDBcIiB4PVwiMzQw
XCIgeT1cIjI1XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxl
bWVudD1cIkluY2x1c2l2ZUdhdGV3YXlfMXJ3cjh1alwiIGlkPVwiSW5jbHVzaXZlR2F0ZXdheV8x
cndyOHVqX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI1MFwiIHdpZHRoPVwiNTBcIiB4PVwi
MjE3XCIgeT1cIjIxNFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1c
IjEzXCIgd2lkdGg9XCIwXCIgeD1cIjI0MlwiIHk9XCIyNjdcIi8+PC9icG1uZGk6QlBNTkxhYmVs
PjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiU2VxdWVu
Y2VGbG93XzBpY252ZHpcIiBpZD1cIlNlcXVlbmNlRmxvd18waWNudmR6X2RpXCI+PG9tZ2RpOndh
eXBvaW50IHg9XCIxNTRcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIyMVwiLz48b21n
ZGk6d2F5cG9pbnQgeD1cIjE4NlwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjIxXCIv
PjxvbWdkaTp3YXlwb2ludCB4PVwiMTg2XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIy
MzlcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIyMTdcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIg
eT1cIjIzOVwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIg
d2lkdGg9XCIwXCIgeD1cIjIwMVwiIHk9XCIyMjMuNVwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9i
cG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxv
d18wcTlpYnhtXCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMHE5aWJ4bV9kaVwiPjxvbWdkaTp3YXlwb2lu
dCB4PVwiMzQwXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCI2NVwiLz48b21nZGk6d2F5
cG9pbnQgeD1cIjI0MlwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiNjVcIi8+PG9tZ2Rp
OndheXBvaW50IHg9XCIyNDJcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIxNFwiLz48
YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCI5MFwi
IHg9XCIyNDZcIiB5PVwiNDMuNVwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVk
Z2U+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18xa2FqdWx6XCIg
aWQ9XCJTZXF1ZW5jZUZsb3dfMWthanVsel9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMjY3XCIg
eHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMzlcIi8+PG9tZ2RpOndheXBvaW50IHg9XCI0
MjNcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIzOVwiLz48b21nZGk6d2F5cG9pbnQg
eD1cIjQyM1wiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMTU4XCIvPjxvbWdkaTp3YXlw
b2ludCB4PVwiMzkwXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIxNThcIi8+PG9tZ2Rp
OndheXBvaW50IHg9XCIzOTBcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjEwNVwiLz48
YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCI5MFwi
IHg9XCIzOTNcIiB5PVwiMTkyXCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1ORWRn
ZT48L2JwbW5kaTpCUE1OUGxhbmU+PC9icG1uZGk6QlBNTkRpYWdyYW0+PC9kZWZpbml0aW9ucz4i
LCAid29ya2Zsb3dfaWQiOiAiYXZhbG9uX3JlZnJlc2giLCAidmVyc2lvbiI6IDQwfSwgIndvcmtm
bG93X2lkIjogNCwgImFjdGlvbnMiOiBbXSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NDY5MDI2
MzE2MTYsICJjcmVhdG9yX2lkIjogInZhbEBraW5nYW5kdW5pb24uY29tIiwgImRlc2NyaXB0aW9u
IjogIlB1bGxzIGRhdGEgZnJvbSBsaW5rZWQgQXZhbG9uIHdvcmtzcGFjZS4gUmVxdWlyZXMgYW4g
QXZhbG9uIFdvcmtzcGFjZSB0byBiZSBsaW5rZWQgdG8gYW4gaW5jaWRlbnQuIFlvdSBjYW4gY3Jl
YXRlIGFuZCBsaW5rIGFuIEF2YWxvbiB3b3Jrc3BhY2UgYXJ0aWZhY3QgYnkgZXhlY3V0aW5nIHRo
ZSBcIkF2YWxvbjogQ3JlYXRlIFdvcmtzcGFjZVwiIGN1c3RvbSBtZW51IGNvbW1hbmQuIn1dLCAi
YWN0aW9ucyI6IFt7ImxvZ2ljX3R5cGUiOiAiYWxsIiwgIm5hbWUiOiAiQXZhbG9uOiBDcmVhdGUg
V29ya3NwYWNlIiwgInZpZXdfaXRlbXMiOiBbXSwgInR5cGUiOiAxLCAid29ya2Zsb3dzIjogW10s
ICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1
aWQiOiAiMjYxZjZhZDItYmE2OC00Y2QxLWFkMjMtNmI1ZmI5Y2NjNjliIiwgImF1dG9tYXRpb25z
IjogW10sICJleHBvcnRfa2V5IjogIkF2YWxvbjogQ3JlYXRlIFdvcmtzcGFjZSIsICJjb25kaXRp
b25zIjogW3sidHlwZSI6IG51bGwsICJldmFsdWF0aW9uX2lkIjogbnVsbCwgImZpZWxkX25hbWUi
OiAiaW5jaWRlbnQucHJvcGVydGllcy5hdmFsb25fd29ya3NwYWNlX2lkIiwgIm1ldGhvZCI6ICJu
b3RfaGFzX2FfdmFsdWUiLCAidmFsdWUiOiBudWxsfV0sICJpZCI6IDE4LCAibWVzc2FnZV9kZXN0
aW5hdGlvbnMiOiBbImF2YWxvbl9hY3Rpb25zIl19LCB7ImxvZ2ljX3R5cGUiOiAiYWxsIiwgIm5h
bWUiOiAiQXZhbG9uOiBQdWxsIE5vZGVzIiwgInZpZXdfaXRlbXMiOiBbXSwgInR5cGUiOiAxLCAi
d29ya2Zsb3dzIjogW10sICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJ0aW1lb3V0X3NlY29u
ZHMiOiA4NjQwMCwgInV1aWQiOiAiYWZjZjkxODMtODRhOS00YzhhLThhYWMtODUxMGFkMDI5NzAw
IiwgImF1dG9tYXRpb25zIjogW10sICJleHBvcnRfa2V5IjogIkF2YWxvbjogUHVsbCBOb2RlcyIs
ICJjb25kaXRpb25zIjogW3sidHlwZSI6IG51bGwsICJldmFsdWF0aW9uX2lkIjogbnVsbCwgImZp
ZWxkX25hbWUiOiAiaW5jaWRlbnQucHJvcGVydGllcy5hdmFsb25fd29ya3NwYWNlX2lkIiwgIm1l
dGhvZCI6ICJoYXNfYV92YWx1ZSIsICJ2YWx1ZSI6IG51bGx9XSwgImlkIjogMTksICJtZXNzYWdl
X2Rlc3RpbmF0aW9ucyI6IFsiYXZhbG9uX2FjdGlvbnMiXX0sIHsibG9naWNfdHlwZSI6ICJhbGwi
LCAibmFtZSI6ICJBdmFsb246IFB1c2ggQXJ0aWZhY3QiLCAidmlld19pdGVtcyI6IFtdLCAidHlw
ZSI6IDEsICJ3b3JrZmxvd3MiOiBbXSwgIm9iamVjdF90eXBlIjogImFydGlmYWN0IiwgInRpbWVv
dXRfc2Vjb25kcyI6IDg2NDAwLCAidXVpZCI6ICJlOTA4NzhkOC1iYzVkLTQ4YjYtODFjZC00MTQ4
NDE1ZThiNTMiLCAiYXV0b21hdGlvbnMiOiBbXSwgImV4cG9ydF9rZXkiOiAiQXZhbG9uOiBQdXNo
IEFydGlmYWN0IiwgImNvbmRpdGlvbnMiOiBbeyJ0eXBlIjogbnVsbCwgImV2YWx1YXRpb25faWQi
OiBudWxsLCAiZmllbGRfbmFtZSI6ICJhcnRpZmFjdC50eXBlIiwgIm1ldGhvZCI6ICJpbiIsICJ2
YWx1ZSI6IFsiSVAgQWRkcmVzcyIsICJETlMgTmFtZSIsICJVUkwiLCAiRW1haWwgU2VuZGVyIiwg
Ik1hbHdhcmUgTUQ1IEhhc2giLCAiTWFsd2FyZSBTSEEtMSBIYXNoIiwgIk1hbHdhcmUgU0hBLTI1
NiBIYXNoIl19LCB7InR5cGUiOiBudWxsLCAiZXZhbHVhdGlvbl9pZCI6IG51bGwsICJmaWVsZF9u
YW1lIjogImFydGlmYWN0LmRlc2NyaXB0aW9uIiwgIm1ldGhvZCI6ICJub3RfY29udGFpbnMiLCAi
dmFsdWUiOiAiQXZhbG9uIn0sIHsidHlwZSI6IG51bGwsICJldmFsdWF0aW9uX2lkIjogbnVsbCwg
ImZpZWxkX25hbWUiOiAiaW5jaWRlbnQucHJvcGVydGllcy5hdmFsb25fd29ya3NwYWNlX2lkIiwg
Im1ldGhvZCI6ICJoYXNfYV92YWx1ZSIsICJ2YWx1ZSI6IG51bGx9XSwgImlkIjogMTcsICJtZXNz
YWdlX2Rlc3RpbmF0aW9ucyI6IFsiYXZhbG9uX2FjdGlvbnMiXX0sIHsibG9naWNfdHlwZSI6ICJh
bGwiLCAibmFtZSI6ICJBdmFsb246IFB1c2ggQXJ0aWZhY3RzIiwgInZpZXdfaXRlbXMiOiBbXSwg
InR5cGUiOiAxLCAid29ya2Zsb3dzIjogW10sICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJ0
aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiNGI1MWIwYzgtM2QyOS00YzFjLTk0MTMt
NzEwOWM4ZGQ1YzUyIiwgImF1dG9tYXRpb25zIjogW10sICJleHBvcnRfa2V5IjogIkF2YWxvbjog
UHVzaCBBcnRpZmFjdHMiLCAiY29uZGl0aW9ucyI6IFt7InR5cGUiOiBudWxsLCAiZXZhbHVhdGlv
bl9pZCI6IG51bGwsICJmaWVsZF9uYW1lIjogImluY2lkZW50LnByb3BlcnRpZXMuYXZhbG9uX3dv
cmtzcGFjZV9pZCIsICJtZXRob2QiOiAiaGFzX2FfdmFsdWUiLCAidmFsdWUiOiBudWxsfV0sICJp
ZCI6IDIwLCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbImF2YWxvbl9hY3Rpb25zIl19LCB7Imxv
Z2ljX3R5cGUiOiAiYWxsIiwgIm5hbWUiOiAiQXZhbG9uOiBTdGFydCBBdXRvLXJlZnJlc2ggV29y
a2Zsb3ciLCAidmlld19pdGVtcyI6IFtdLCAidHlwZSI6IDEsICJ3b3JrZmxvd3MiOiBbImF2YWxv
bl9yZWZyZXNoIl0sICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJ0aW1lb3V0X3NlY29uZHMi
OiA4NjQwMCwgInV1aWQiOiAiNTI0MjA5YjktYTY5Ni00ODFlLWI5Y2MtZGRkMDE4YmM0MTk5Iiwg
ImF1dG9tYXRpb25zIjogW3siZmllbGQiOiAiYXZhbG9uX2F1dG9fcmVmcmVzaCIsICJvcGVyYXRp
b24iOiAic2V0X2ZpZWxkIiwgInR5cGUiOiAibW9kaWZ5X2ZpZWxkIiwgInZhbHVlIjogdHJ1ZSwg
InR5cGVfaWQiOiAiaW5jaWRlbnQifV0sICJleHBvcnRfa2V5IjogIkF2YWxvbjogU3RhcnQgQXV0
by1yZWZyZXNoIFdvcmtmbG93IiwgImNvbmRpdGlvbnMiOiBbeyJ0eXBlIjogbnVsbCwgImV2YWx1
YXRpb25faWQiOiBudWxsLCAiZmllbGRfbmFtZSI6ICJpbmNpZGVudC5wcm9wZXJ0aWVzLmF2YWxv
bl93b3Jrc3BhY2VfaWQiLCAibWV0aG9kIjogImhhc19hX3ZhbHVlIiwgInZhbHVlIjogbnVsbH0s
IHsidHlwZSI6IG51bGwsICJldmFsdWF0aW9uX2lkIjogbnVsbCwgImZpZWxkX25hbWUiOiAiaW5j
aWRlbnQucHJvcGVydGllcy5hdmFsb25fYXV0b19yZWZyZXNoIiwgIm1ldGhvZCI6ICJub3RfZXF1
YWxzIiwgInZhbHVlIjogdHJ1ZX1dLCAiaWQiOiAyMSwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjog
W119LCB7ImxvZ2ljX3R5cGUiOiAiYWxsIiwgIm5hbWUiOiAiQXZhbG9uOiBTdG9wIEF1dG8tcmVm
cmVzaCBXb3JrZmxvdyIsICJ2aWV3X2l0ZW1zIjogW10sICJ0eXBlIjogMSwgIndvcmtmbG93cyI6
IFtdLCAib2JqZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAidGltZW91dF9zZWNvbmRzIjogODY0MDAs
ICJ1dWlkIjogImNjNmZjZjk3LTJjYWItNGZjOC05YTIyLWYyMDQwOTU0NGMzYSIsICJhdXRvbWF0
aW9ucyI6IFtdLCAiZXhwb3J0X2tleSI6ICJBdmFsb246IFN0b3AgQXV0by1yZWZyZXNoIFdvcmtm
bG93IiwgImNvbmRpdGlvbnMiOiBbeyJ0eXBlIjogbnVsbCwgImV2YWx1YXRpb25faWQiOiBudWxs
LCAiZmllbGRfbmFtZSI6ICJpbmNpZGVudC5wcm9wZXJ0aWVzLmF2YWxvbl9hdXRvX3JlZnJlc2gi
LCAibWV0aG9kIjogImVxdWFscyIsICJ2YWx1ZSI6IHRydWV9XSwgImlkIjogMjIsICJtZXNzYWdl
X2Rlc3RpbmF0aW9ucyI6IFsiYXZhbG9uX2FjdGlvbnMiXX1dLCAibGF5b3V0cyI6IFtdLCAiZXhw
b3J0X2Zvcm1hdF92ZXJzaW9uIjogMiwgImlkIjogMzAsICJpbmR1c3RyaWVzIjogbnVsbCwgInBo
YXNlcyI6IFtdLCAiYWN0aW9uX29yZGVyIjogW10sICJnZW9zIjogbnVsbCwgInNlcnZlcl92ZXJz
aW9uIjogeyJtYWpvciI6IDMwLCAidmVyc2lvbiI6ICIzMC4wLjM0NzYiLCAiYnVpbGRfbnVtYmVy
IjogMzQ3NiwgIm1pbm9yIjogMH0sICJ0aW1lZnJhbWVzIjogbnVsbCwgIndvcmtzcGFjZXMiOiBb
XSwgImF1dG9tYXRpY190YXNrcyI6IFtdLCAiZnVuY3Rpb25zIjogW3siZGlzcGxheV9uYW1lIjog
ImF2YWxvbl9yZWZyZXNoIiwgInV1aWQiOiAiNGJjYzJkZjEtYzYwYy00ZjYyLTg3OWEtMDI0Y2Ix
NTBhMTllIiwgImNyZWF0b3IiOiB7ImRpc3BsYXlfbmFtZSI6ICJWYWwgS2FudGNoZXYiLCAidHlw
ZSI6ICJ1c2VyIiwgImlkIjogMSwgIm5hbWUiOiAidmFsQGtpbmdhbmR1bmlvbi5jb20ifSwgInZp
ZXdfaXRlbXMiOiBbeyJzaG93X2lmIjogbnVsbCwgImZpZWxkX3R5cGUiOiAiX19mdW5jdGlvbiIs
ICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2UsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiY29u
dGVudCI6ICJlYWZjYjg2OS1mYzU3LTQ3MWUtYTQzNi0wYjI2Y2Q2YjA1ZjMiLCAic3RlcF9sYWJl
bCI6IG51bGx9LCB7InNob3dfaWYiOiBudWxsLCAiZmllbGRfdHlwZSI6ICJfX2Z1bmN0aW9uIiwg
InNob3dfbGlua19oZWFkZXIiOiBmYWxzZSwgImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJjb250
ZW50IjogIjdiZmY3NDE5LWVjMTItNDQ4ZS1iNGQyLTViYTNmNzVhZjUxZCIsICJzdGVwX2xhYmVs
IjogbnVsbH1dLCAiZXhwb3J0X2tleSI6ICJhdmFsb25fcmVmcmVzaCIsICJsYXN0X21vZGlmaWVk
X2J5IjogeyJkaXNwbGF5X25hbWUiOiAiVmFsIEthbnRjaGV2IiwgInR5cGUiOiAidXNlciIsICJp
ZCI6IDEsICJuYW1lIjogInZhbEBraW5nYW5kdW5pb24uY29tIn0sICJuYW1lIjogImF2YWxvbl9y
ZWZyZXNoIiwgInZlcnNpb24iOiA1LCAid29ya2Zsb3dzIjogW3sicHJvZ3JhbW1hdGljX25hbWUi
OiAiYXZhbG9uX3JlZnJlc2giLCAib2JqZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAidXVpZCI6IG51
bGwsICJhY3Rpb25zIjogW10sICJuYW1lIjogIkF2YWxvbjogUmVmcmVzaCIsICJ3b3JrZmxvd19p
ZCI6IDQsICJkZXNjcmlwdGlvbiI6IG51bGx9XSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NDY2
Mzg0MTEzNzgsICJkZXN0aW5hdGlvbl9oYW5kbGUiOiAiYXZhbG9uX2FjdGlvbnMiLCAiaWQiOiAy
LCAiZGVzY3JpcHRpb24iOiB7ImNvbnRlbnQiOiAiUHVsbHMgZGF0YSBmcm9tIGEgbGlua2VkIEF2
YWxvbiB3b3Jrc3BhY2UuIFJlcXVpcmVzIGFuIEF2YWxvbiBXb3Jrc3BhY2UgYXJ0aWZhY3QgdG8g
YmUgcHJlc2VudCBpbiB0aGUgaW5jaWRlbnQuIEF2YWxvbiBXb3Jrc3BhY2UgYXJ0aWZhY3QgY2Fu
IGJlIGNyZWF0ZWQgd2l0aCB0aGUgXCJBdmFsb246IENyZWF0ZSBXb3Jrc3BhY2VcIiBjdXN0b20g
bWVudSBjb21tYW5kLiIsICJmb3JtYXQiOiAidGV4dCJ9fV0sICJub3RpZmljYXRpb25zIjogbnVs
bCwgInJlZ3VsYXRvcnMiOiBudWxsLCAiaW5jaWRlbnRfdHlwZXMiOiBbeyJjcmVhdGVfZGF0ZSI6
IDE1NDgyMTA3NjI5MzQsICJkZXNjcmlwdGlvbiI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChp
bnRlcm5hbCkiLCAiZXhwb3J0X2tleSI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5h
bCkiLCAiaWQiOiAwLCAibmFtZSI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCki
LCAidXBkYXRlX2RhdGUiOiAxNTQ4MjEwNzYyOTM0LCAidXVpZCI6ICJiZmVlYzJkNC0zNzcwLTEx
ZTgtYWQzOS00YTAwMDQwNDRhYTAiLCAiZW5hYmxlZCI6IGZhbHNlLCAic3lzdGVtIjogZmFsc2Us
ICJwYXJlbnRfaWQiOiBudWxsLCAiaGlkZGVuIjogZmFsc2V9XSwgInNjcmlwdHMiOiBbXSwgInR5
cGVzIjogW10sICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFt7InV1aWQiOiAiYzMzMjUwZjQtNzgx
MS00NWI1LTg1OGItZDU5N2QyMjY5YzgxIiwgImV4cG9ydF9rZXkiOiAiYXZhbG9uX2FjdGlvbnMi
LCAibmFtZSI6ICJhdmFsb25fYWN0aW9ucyIsICJkZXN0aW5hdGlvbl90eXBlIjogMCwgInByb2dy
YW1tYXRpY19uYW1lIjogImF2YWxvbl9hY3Rpb25zIiwgImV4cGVjdF9hY2siOiB0cnVlLCAidXNl
cnMiOiBbInZhbEBraW5nYW5kdW5pb24uY29tIl19XSwgImluY2lkZW50X2FydGlmYWN0X3R5cGVz
IjogW10sICJyb2xlcyI6IFtdLCAiZmllbGRzIjogW3sib3BlcmF0aW9ucyI6IFtdLCAidHlwZV9p
ZCI6IDAsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAiQXZhbG9uOiBXb3Jrc3BhY2Ug
SUQiLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJwcmVmaXgiOiAicHJvcGVydGllcyIsICJjaGFu
Z2VhYmxlIjogdHJ1ZSwgImlkIjogODAsICJyZWFkX29ubHkiOiBmYWxzZSwgInV1aWQiOiAiMzJl
NTgxZmEtMmU2ZC00OTU0LThiMGUtZjU2NjNjMWY1OWY0IiwgImNob3NlbiI6IGZhbHNlLCAiaW5w
dXRfdHlwZSI6ICJudW1iZXIiLCAidG9vbHRpcCI6ICJFbnRlciBBdmFsb24gV29ya3NwYWNlIElE
IHRvIGxpbmsgaXQgdG8gdGhpcyBJbmNpZGVudCAgIiwgImludGVybmFsIjogZmFsc2UsICJyaWNo
X3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJpbmNpZGVudC9h
dmFsb25fd29ya3NwYWNlX2lkIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJwbGFjZWhv
bGRlciI6ICIiLCAibmFtZSI6ICJhdmFsb25fd29ya3NwYWNlX2lkIiwgImRlZmF1bHRfY2hvc2Vu
X2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjogW119LCB7Im9wZXJhdGlvbnMiOiBbXSwgInR5
cGVfaWQiOiAwLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogIkF2YWxvbjogTGFzdCBQ
dWxsIFRpbWUiLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJwcmVmaXgiOiAicHJvcGVydGllcyIs
ICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogODIsICJyZWFkX29ubHkiOiBmYWxzZSwgInV1aWQi
OiAiNTdjZDI3MmItYzAxMS00ODdhLThiMDEtOGE3M2JmMjMwYTMwIiwgImNob3NlbiI6IGZhbHNl
LCAiaW5wdXRfdHlwZSI6ICJkYXRldGltZXBpY2tlciIsICJ0b29sdGlwIjogIlRpbWUgb2YgdGhl
IGxhc3QgcHVsbCBmcm9tIEF2YWxvbiIsICJpbnRlcm5hbCI6IGZhbHNlLCAicmljaF90ZXh0Ijog
ZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAiaW5jaWRlbnQvYXZhbG9uX2xh
c3RfcHVsbF90aW1lIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRlciI6
ICIiLCAibmFtZSI6ICJhdmFsb25fbGFzdF9wdWxsX3RpbWUiLCAiZGVmYXVsdF9jaG9zZW5fYnlf
c2VydmVyIjogZmFsc2UsICJ2YWx1ZXMiOiBbXX0sIHsib3BlcmF0aW9ucyI6IFtdLCAidHlwZV9p
ZCI6IDAsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAiQXZhbG9uOiBBdXRvIFJlZnJl
c2giLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJwcmVmaXgiOiAicHJvcGVydGllcyIsICJjaGFu
Z2VhYmxlIjogdHJ1ZSwgImlkIjogODEsICJyZWFkX29ubHkiOiBmYWxzZSwgInV1aWQiOiAiMDZh
MmFiOGYtN2Q2OS00OTZiLWIxZmEtMGY2NzlhNTYzM2E2IiwgImNob3NlbiI6IGZhbHNlLCAiaW5w
dXRfdHlwZSI6ICJib29sZWFuIiwgInRvb2x0aXAiOiAiU2V0IHRvIFllcyB0byBhdXRvbWF0aWNh
bGx5IHB1bGwgbm9kZXMgZnJvbSBBdmFsb24gZXZlcnkgNjAgbWludXRlcyIsICJpbnRlcm5hbCI6
IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXki
OiAiaW5jaWRlbnQvYXZhbG9uX2F1dG9fcmVmcmVzaCIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZh
bHNlLCAicGxhY2Vob2xkZXIiOiAiIiwgIm5hbWUiOiAiYXZhbG9uX2F1dG9fcmVmcmVzaCIsICJk
ZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInZhbHVlcyI6IFtdfSwgeyJvcGVyYXRp
b25zIjogW10sICJ0eXBlX2lkIjogMTEsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAi
aW5jaWRlbnRfbmFtZSIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJj
aGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogODQsICJyZWFkX29ubHkiOiBmYWxzZSwgInV1aWQiOiAi
N2JmZjc0MTktZWMxMi00NDhlLWI0ZDItNWJhM2Y3NWFmNTFkIiwgImNob3NlbiI6IGZhbHNlLCAi
aW5wdXRfdHlwZSI6ICJ0ZXh0IiwgInRvb2x0aXAiOiAiSW5jaWRlbnQgTmFtZSIsICJpbnRlcm5h
bCI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9r
ZXkiOiAiX19mdW5jdGlvbi9pbmNpZGVudF9uYW1lIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFs
c2UsICJwbGFjZWhvbGRlciI6ICIiLCAibmFtZSI6ICJpbmNpZGVudF9uYW1lIiwgImRlZmF1bHRf
Y2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjogW119LCB7Im9wZXJhdGlvbnMiOiBb
XSwgInR5cGVfaWQiOiAxMSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJpbmNpZGVu
dF9pZCIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxl
IjogdHJ1ZSwgImlkIjogODMsICJyZWFkX29ubHkiOiBmYWxzZSwgInV1aWQiOiAiZWFmY2I4Njkt
ZmM1Ny00NzFlLWE0MzYtMGIyNmNkNmIwNWYzIiwgImNob3NlbiI6IGZhbHNlLCAiaW5wdXRfdHlw
ZSI6ICJudW1iZXIiLCAidG9vbHRpcCI6ICJJbmNpZGVudCBJRCIsICJpbnRlcm5hbCI6IGZhbHNl
LCAicmljaF90ZXh0IjogZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAiX19m
dW5jdGlvbi9pbmNpZGVudF9pZCIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicGxhY2Vo
b2xkZXIiOiAiIiwgIm5hbWUiOiAiaW5jaWRlbnRfaWQiLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2Vy
dmVyIjogZmFsc2UsICJyZXF1aXJlZCI6ICJhbHdheXMiLCAidmFsdWVzIjogW119XSwgIm92ZXJy
aWRlcyI6IFtdLCAiZXhwb3J0X2RhdGUiOiAxNTQ4MjEwNjU2MTgyfQ==
"""
    )